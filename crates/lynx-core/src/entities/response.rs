//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use sea_orm::{entity::prelude::*, Set};
use serde::{Deserialize, Serialize};

use crate::proxy_log::get_header_and_size;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
#[sea_orm(table_name = "response")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub header: Json,
    pub request_id: i32,
    pub trace_id: String,
    pub header_size: u32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::request::Entity",
        from = "Column::RequestId",
        to = "super::request::Column::Id"
    )]
    Request,
}

// `Related` trait has to be implemented by hand
impl Related<super::request::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Request.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl From<&hyper::Response<hyper::body::Incoming>> for ActiveModel {
    fn from(res: &hyper::Response<hyper::body::Incoming>) -> Self {
        let (headers, header_size) = get_header_and_size(res.headers());
        ActiveModel {
            header: Set(headers),
            header_size: Set(header_size as u32),
            ..Default::default()
        }
    }
}
