//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.4

use http::Request;
use hyper::body::Incoming;
use sea_orm::{Set, entity::prelude::*};
use serde::{Deserialize, Serialize};
use ts_rs::TS;

use crate::{proxy_log::get_header_and_size, schedular::get_req_trace_id};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, TS)]
#[serde(rename_all = "camelCase")]
#[sea_orm(table_name = "request")]
#[ts(export, export_to = "RequestModel.ts")]
// #[builder(pattern = "owned")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub uri: String,
    pub trace_id: String,
    pub method: String,
    pub schema: String,
    pub version: String,
    pub status_code: Option<u16>,
    pub response_mime_type: Option<String>,
    #[ts(type = "Record<string, string> | undefined")]
    pub header: Option<Json>,
    pub header_size: Option<u32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::response::Entity")]
    Response,
}

impl Related<super::response::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Response.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

impl From<&Request<Incoming>> for ActiveModel {
    fn from(req: &Request<Incoming>) -> Self {
        let trace_id = get_req_trace_id(req);

        let (headers, header_size) = get_header_and_size(req.headers());
        ActiveModel {
            trace_id: Set(trace_id.to_string()),
            uri: Set(req.uri().to_string()),
            method: Set(req.method().to_string()),
            schema: Set(req.uri().scheme_str().unwrap_or("").to_string()),
            version: Set(format!("{:?}", req.version())),
            header: Set(Some(headers)),
            header_size: Set(Some(header_size as u32)),
            ..Default::default()
        }
    }
}
