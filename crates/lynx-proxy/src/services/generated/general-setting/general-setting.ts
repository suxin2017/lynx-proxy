/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  ErrorResponse,
  GeneralSetting,
  ResponseDataWrapperGeneralSetting,
  ResponseDataWrapperTupleUnit,
} from '../utoipaAxum.schemas';

import { customInstance } from '../../customInstance';

export const getGeneralSetting = (signal?: AbortSignal) => {
  return customInstance<ResponseDataWrapperGeneralSetting>({
    url: `/general_setting/general-setting`,
    method: 'GET',
    signal,
  });
};

export const getGetGeneralSettingQueryKey = () => {
  return [`/general_setting/general-setting`] as const;
};

export const getGetGeneralSettingQueryOptions = <
  TData = Awaited<ReturnType<typeof getGeneralSetting>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getGeneralSetting>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetGeneralSettingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGeneralSetting>>
  > = ({ signal }) => getGeneralSetting(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGeneralSetting>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetGeneralSettingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGeneralSetting>>
>;
export type GetGeneralSettingQueryError = ErrorResponse;

export function useGetGeneralSetting<
  TData = Awaited<ReturnType<typeof getGeneralSetting>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGeneralSetting>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGeneralSetting>>,
          TError,
          Awaited<ReturnType<typeof getGeneralSetting>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGeneralSetting<
  TData = Awaited<ReturnType<typeof getGeneralSetting>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGeneralSetting>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getGeneralSetting>>,
          TError,
          Awaited<ReturnType<typeof getGeneralSetting>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetGeneralSetting<
  TData = Awaited<ReturnType<typeof getGeneralSetting>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGeneralSetting>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetGeneralSetting<
  TData = Awaited<ReturnType<typeof getGeneralSetting>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getGeneralSetting>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetGeneralSettingQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateGeneralSetting = (generalSetting: GeneralSetting) => {
  return customInstance<ResponseDataWrapperTupleUnit>({
    url: `/general_setting/general-setting`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: generalSetting,
  });
};

export const getUpdateGeneralSettingMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateGeneralSetting>>,
    TError,
    { data: GeneralSetting },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateGeneralSetting>>,
  TError,
  { data: GeneralSetting },
  TContext
> => {
  const mutationKey = ['updateGeneralSetting'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateGeneralSetting>>,
    { data: GeneralSetting }
  > = (props) => {
    const { data } = props ?? {};

    return updateGeneralSetting(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateGeneralSettingMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateGeneralSetting>>
>;
export type UpdateGeneralSettingMutationBody = GeneralSetting;
export type UpdateGeneralSettingMutationError = ErrorResponse;

export const useUpdateGeneralSetting = <
  TError = ErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateGeneralSetting>>,
      TError,
      { data: GeneralSetting },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateGeneralSetting>>,
  TError,
  { data: GeneralSetting },
  TContext
> => {
  const mutationOptions = getUpdateGeneralSettingMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
