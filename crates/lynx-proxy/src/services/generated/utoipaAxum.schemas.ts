/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
/**
 * Paginated response for API debug entries
 */
export interface ApiDebugListResponse {
  data: ApiDebugResponse[];
  /** @minimum 0 */
  page: number;
  /** @minimum 0 */
  perPage: number;
  /** @minimum 0 */
  total: number;
  /** @minimum 0 */
  totalPages: number;
}

export type ApiDebugResponseBody = string | null;

export type ApiDebugResponseContentType = string | null;

export type ApiDebugResponseErrorMessage = string | null;

export type ApiDebugResponseHeaders = null | Value;

export type ApiDebugResponseResponseBody = string | null;

export type ApiDebugResponseResponseHeaders = null | Value;

export type ApiDebugResponseResponseStatus = number | null;

export type ApiDebugResponseResponseTime = number | null;

export type ApiDebugResponseTimeout = number | null;

/**
 * Response for API debug operations
 */
export interface ApiDebugResponse {
  body?: ApiDebugResponseBody;
  contentType?: ApiDebugResponseContentType;
  createdAt: number;
  errorMessage?: ApiDebugResponseErrorMessage;
  headers?: ApiDebugResponseHeaders;
  id: number;
  method: HttpMethod;
  name: string;
  responseBody?: ApiDebugResponseResponseBody;
  responseHeaders?: ApiDebugResponseResponseHeaders;
  responseStatus?: ApiDebugResponseResponseStatus;
  responseTime?: ApiDebugResponseResponseTime;
  status: RequestStatus;
  timeout?: ApiDebugResponseTimeout;
  updatedAt: number;
  url: string;
}

/**
 * Statistics for API debug entries
 */
export interface ApiDebugStats {
  /** @minimum 0 */
  failedCount: number;
  /** @minimum 0 */
  pendingCount: number;
  /** @minimum 0 */
  successCount: number;
  /** @minimum 0 */
  total: number;
}

export interface BatchRuleIdsRequest {
  /** ËßÑÂàôIDÂàóË°® */
  ids: number[];
}

export type BlockHandlerConfigReason = string | null;

/**
 * @minimum 0
 */
export type BlockHandlerConfigStatusCode = number | null;

/**
 * Block handler configuration
 */
export interface BlockHandlerConfig {
  reason?: BlockHandlerConfigReason;
  /** @minimum 0 */
  statusCode?: BlockHandlerConfigStatusCode;
}

export type CaptureConditionOneOfAllOfType =
  (typeof CaptureConditionOneOfAllOfType)[keyof typeof CaptureConditionOneOfAllOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CaptureConditionOneOfAllOfType = {
  simple: 'simple',
} as const;

export type CaptureConditionOneOfAllOf = {
  type: CaptureConditionOneOfAllOfType;
};

export type CaptureConditionOneOf = SimpleCaptureCondition &
  CaptureConditionOneOfAllOf;

export type CaptureConditionOneOfFourAllOfType =
  (typeof CaptureConditionOneOfFourAllOfType)[keyof typeof CaptureConditionOneOfFourAllOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CaptureConditionOneOfFourAllOfType = {
  complex: 'complex',
} as const;

export type CaptureConditionOneOfFourAllOf = {
  type: CaptureConditionOneOfFourAllOfType;
};

export type CaptureConditionOneOfFour = ComplexCaptureRule &
  CaptureConditionOneOfFourAllOf;

/**
 * ÊçïËé∑Êù°‰ª∂ÔºàÁÆÄÂçïÊàñÂ§çÊùÇÔºâ
 */
export type CaptureCondition =
  | CaptureConditionOneOf
  | CaptureConditionOneOfFour;

export interface CaptureFilter {
  enabled: boolean;
  excludeDomains: DomainFilter[];
  includeDomains: DomainFilter[];
}

export type CaptureRuleId = number | null;

/**
 * ÂÆåÊï¥ÁöÑÊçïËé∑ËßÑÂàô
 */
export interface CaptureRule {
  condition: CaptureCondition;
  id?: CaptureRuleId;
}

export interface CaptureSwitch {
  recordingStatus: RecordingStatus;
}

/**
 * Capture type enumeration
 */
export type CaptureType = (typeof CaptureType)[keyof typeof CaptureType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CaptureType = {
  glob: 'glob',
  regex: 'regex',
  exact: 'exact',
  contains: 'contains',
} as const;

export interface ClientProxyConfig {
  apiDebug: ProxyConfig;
  proxyRequests: ProxyConfig;
}

/**
 * Â§çÊùÇÊçïËé∑ËßÑÂàôÔºàÊîØÊåÅÂµåÂ•óÈÄªËæëÔºâ
 */
export interface ComplexCaptureRule {
  /** Â≠êÊù°‰ª∂ÂàóË°® */
  conditions: CaptureCondition[];
  /** ÈÄªËæëÊìç‰ΩúÁ¨¶ */
  operator: LogicalOperator;
}

export type CreateApiDebugRequestBody = string | null;

export type CreateApiDebugRequestContentType = string | null;

export type CreateApiDebugRequestHeaders = null | Value;

export type CreateApiDebugRequestTimeout = number | null;

/**
 * Request for creating a new API debug entry
 */
export interface CreateApiDebugRequest {
  body?: CreateApiDebugRequestBody;
  contentType?: CreateApiDebugRequestContentType;
  headers?: CreateApiDebugRequestHeaders;
  method: HttpMethod;
  name: string;
  timeout?: CreateApiDebugRequestTimeout;
  url: string;
}

export type CreateRuleRequestDescription = string | null;

export interface CreateRuleRequest {
  capture: CaptureRule;
  description?: CreateRuleRequestDescription;
  enabled: boolean;
  handlers: HandlerRule[];
  name: string;
  priority: number;
}

export interface CreateRuleResponse {
  id: number;
}

/**
 * Optional variance in milliseconds for random delay (¬±variance)
 * @minimum 0
 */
export type DelayHandlerConfigVarianceMs = number | null;

/**
 * Delay handler configuration for adding request processing delays
 */
export interface DelayHandlerConfig {
  /**
   * Delay duration in milliseconds
   * @minimum 0
   */
  delayMs: number;
  /** Whether to delay before or after processing the request */
  delayType: DelayType;
  /**
   * Optional variance in milliseconds for random delay (¬±variance)
   * @minimum 0
   */
  varianceMs?: DelayHandlerConfigVarianceMs;
}

/**
 * Type of delay to apply
 */
export type DelayType = (typeof DelayType)[keyof typeof DelayType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DelayType = {
  beforeRequest: 'beforeRequest',
  afterRequest: 'afterRequest',
  both: 'both',
} as const;

export interface DomainFilter {
  domain: string;
  enabled: boolean;
  /**
   * @minimum 0
   * @maximum 65535
   */
  port: number;
}

export type EmptyOkResponse = ResponseDataWrapperTupleUnit;

export interface ErrorResponse {
  /** @minimum 0 */
  code: number;
  message: string;
}

/**
 * Request body
 */
export type ExecuteApiDebugRequestBody = string | null;

/**
 * Content type header
 */
export type ExecuteApiDebugRequestContentType = string | null;

/**
 * HTTP headers as key-value pairs
 */
export type ExecuteApiDebugRequestHeadersAnyOf = { [key: string]: string };

/**
 * HTTP headers as key-value pairs
 */
export type ExecuteApiDebugRequestHeaders =
  ExecuteApiDebugRequestHeadersAnyOf | null;

/**
 * Timeout in seconds (default: 30)
 * @minimum 0
 */
export type ExecuteApiDebugRequestTimeout = number | null;

/**
 * Request for executing an API debug entry
 */
export interface ExecuteApiDebugRequest {
  /** Request body */
  body?: ExecuteApiDebugRequestBody;
  /** Content type header */
  contentType?: ExecuteApiDebugRequestContentType;
  /** HTTP headers as key-value pairs */
  headers?: ExecuteApiDebugRequestHeaders;
  /** HTTP method */
  method: HttpMethod;
  /** Name of the API request */
  name: string;
  /**
   * Timeout in seconds (default: 30)
   * @minimum 0
   */
  timeout?: ExecuteApiDebugRequestTimeout;
  /** Target URL */
  url: string;
}

/**
 * Error message if request failed
 */
export type ExecuteApiDebugResponseErrorMessage = string | null;

/**
 * Response body
 */
export type ExecuteApiDebugResponseResponseBody = string | null;

export type ExecuteApiDebugResponseResponseHeaders = null | Value;

/**
 * HTTP response status code
 */
export type ExecuteApiDebugResponseResponseStatus = number | null;

/**
 * Response time in milliseconds
 */
export type ExecuteApiDebugResponseResponseTime = number | null;

/**
 * Response for executing an API debug entry
 */
export interface ExecuteApiDebugResponse {
  /** Error message if request failed */
  errorMessage?: ExecuteApiDebugResponseErrorMessage;
  /** ID of the created debug entry */
  id: number;
  /** Response body */
  responseBody?: ExecuteApiDebugResponseResponseBody;
  responseHeaders?: ExecuteApiDebugResponseResponseHeaders;
  /** HTTP response status code */
  responseStatus?: ExecuteApiDebugResponseResponseStatus;
  /** Response time in milliseconds */
  responseTime?: ExecuteApiDebugResponseResponseTime;
  /** Request execution status */
  status: RequestStatus;
}

export type GetRequestsDataTraceIds = string[] | null;

export interface GetRequestsData {
  traceIds?: GetRequestsDataTraceIds;
}

export type HandlerRuleDescription = string | null;

export type HandlerRuleId = number | null;

/**
 * Handler rule configuration
 */
export interface HandlerRule {
  description?: HandlerRuleDescription;
  enabled: boolean;
  executionOrder: number;
  handlerType: HandlerRuleType;
  id?: HandlerRuleId;
  name: string;
}

export type HandlerRuleTypeOneOfAllOfType =
  (typeof HandlerRuleTypeOneOfAllOfType)[keyof typeof HandlerRuleTypeOneOfAllOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HandlerRuleTypeOneOfAllOfType = {
  block: 'block',
} as const;

export type HandlerRuleTypeOneOfAllOf = {
  type: HandlerRuleTypeOneOfAllOfType;
};

export type HandlerRuleTypeOneOf = BlockHandlerConfig &
  HandlerRuleTypeOneOfAllOf;

export type HandlerRuleTypeOneOfFourAllOfType =
  (typeof HandlerRuleTypeOneOfFourAllOfType)[keyof typeof HandlerRuleTypeOneOfFourAllOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HandlerRuleTypeOneOfFourAllOfType = {
  modifyRequest: 'modifyRequest',
} as const;

export type HandlerRuleTypeOneOfFourAllOf = {
  type: HandlerRuleTypeOneOfFourAllOfType;
};

export type HandlerRuleTypeOneOfFour = ModifyRequestConfig &
  HandlerRuleTypeOneOfFourAllOf;

export type HandlerRuleTypeOneOfSevenAllOfType =
  (typeof HandlerRuleTypeOneOfSevenAllOfType)[keyof typeof HandlerRuleTypeOneOfSevenAllOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HandlerRuleTypeOneOfSevenAllOfType = {
  localFile: 'localFile',
} as const;

export type HandlerRuleTypeOneOfSevenAllOf = {
  type: HandlerRuleTypeOneOfSevenAllOfType;
};

export type HandlerRuleTypeOneOfSeven = LocalFileConfig &
  HandlerRuleTypeOneOfSevenAllOf;

export type HandlerRuleTypeOneOfOnezeroAllOfType =
  (typeof HandlerRuleTypeOneOfOnezeroAllOfType)[keyof typeof HandlerRuleTypeOneOfOnezeroAllOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HandlerRuleTypeOneOfOnezeroAllOfType = {
  modifyResponse: 'modifyResponse',
} as const;

export type HandlerRuleTypeOneOfOnezeroAllOf = {
  type: HandlerRuleTypeOneOfOnezeroAllOfType;
};

export type HandlerRuleTypeOneOfOnezero = ModifyResponseConfig &
  HandlerRuleTypeOneOfOnezeroAllOf;

export type HandlerRuleTypeOneOfOnethreeAllOfType =
  (typeof HandlerRuleTypeOneOfOnethreeAllOfType)[keyof typeof HandlerRuleTypeOneOfOnethreeAllOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HandlerRuleTypeOneOfOnethreeAllOfType = {
  proxyForward: 'proxyForward',
} as const;

export type HandlerRuleTypeOneOfOnethreeAllOf = {
  type: HandlerRuleTypeOneOfOnethreeAllOfType;
};

export type HandlerRuleTypeOneOfOnethree = ProxyForwardConfig &
  HandlerRuleTypeOneOfOnethreeAllOf;

export type HandlerRuleTypeOneOfOnesixAllOfType =
  (typeof HandlerRuleTypeOneOfOnesixAllOfType)[keyof typeof HandlerRuleTypeOneOfOnesixAllOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HandlerRuleTypeOneOfOnesixAllOfType = {
  htmlScriptInjector: 'htmlScriptInjector',
} as const;

export type HandlerRuleTypeOneOfOnesixAllOf = {
  type: HandlerRuleTypeOneOfOnesixAllOfType;
};

export type HandlerRuleTypeOneOfOnesix = HtmlScriptInjectorConfig &
  HandlerRuleTypeOneOfOnesixAllOf;

export type HandlerRuleTypeOneOfOnenineAllOfType =
  (typeof HandlerRuleTypeOneOfOnenineAllOfType)[keyof typeof HandlerRuleTypeOneOfOnenineAllOfType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HandlerRuleTypeOneOfOnenineAllOfType = {
  delay: 'delay',
} as const;

export type HandlerRuleTypeOneOfOnenineAllOf = {
  type: HandlerRuleTypeOneOfOnenineAllOfType;
};

export type HandlerRuleTypeOneOfOnenine = DelayHandlerConfig &
  HandlerRuleTypeOneOfOnenineAllOf;

export type HandlerRuleType =
  | HandlerRuleTypeOneOf
  | HandlerRuleTypeOneOfFour
  | HandlerRuleTypeOneOfSeven
  | HandlerRuleTypeOneOfOnezero
  | HandlerRuleTypeOneOfOnethree
  | HandlerRuleTypeOneOfOnesix
  | HandlerRuleTypeOneOfOnenine;

/**
 * Content to inject into HTML pages
 */
export type HtmlScriptInjectorConfigContent = string | null;

/**
 * Position to inject the content (head, body-start, body-end)
 */
export type HtmlScriptInjectorConfigInjectionPosition = string | null;

/**
 * HTML script injection handler configuration
 */
export interface HtmlScriptInjectorConfig {
  /** Content to inject into HTML pages */
  content?: HtmlScriptInjectorConfigContent;
  /** Position to inject the content (head, body-start, body-end) */
  injectionPosition?: HtmlScriptInjectorConfigInjectionPosition;
}

/**
 * HTTP method enumeration
 */
export type HttpMethod = (typeof HttpMethod)[keyof typeof HttpMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const HttpMethod = {
  GET: 'GET',
  POST: 'POST',
  PUT: 'PUT',
  DELETE: 'DELETE',
  PATCH: 'PATCH',
  HEAD: 'HEAD',
  OPTIONS: 'OPTIONS',
} as const;

export type LocalFileConfigContentType = string | null;

/**
 * @minimum 0
 */
export type LocalFileConfigStatusCode = number | null;

/**
 * Local file handler configuration
 */
export interface LocalFileConfig {
  contentType?: LocalFileConfigContentType;
  filePath: string;
  /** @minimum 0 */
  statusCode?: LocalFileConfigStatusCode;
}

/**
 * ÈÄªËæëÊìç‰ΩúÁ¨¶
 */
export type LogicalOperator =
  (typeof LogicalOperator)[keyof typeof LogicalOperator];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LogicalOperator = {
  and: 'and',
  or: 'or',
  not: 'not',
} as const;

export type MessageEventBody = string;

export type MessageEventRequestHeaders = { [key: string]: string };

export interface MessageEventRequest {
  body: MessageEventBody;
  headerSize: MessageHeaderSize;
  headers: MessageEventRequestHeaders;
  method: string;
  url: string;
  version: string;
}

export type MessageEventResponseHeaders = { [key: string]: string };

export interface MessageEventResponse {
  body: MessageEventBody;
  headerSize: MessageHeaderSize;
  headers: MessageEventResponseHeaders;
  /** @minimum 0 */
  status: number;
  version: string;
}

export type MessageEventStatusOneOf = {
  Error: string;
};

export type MessageEventStatus =
  | 'Initial'
  | 'RequestStarted'
  | 'Completed'
  | MessageEventStatusOneOf
  | 'Cancelled';

export type MessageEventStoreValueMessages = null | MessageEventWebSocket;

export type MessageEventStoreValueRequest = null | MessageEventRequest;

export type MessageEventStoreValueResponse = null | MessageEventResponse;

export type MessageEventStoreValueTunnel = null | MessageEventTunnel;

export interface MessageEventStoreValue {
  isNew: boolean;
  messages?: MessageEventStoreValueMessages;
  request?: MessageEventStoreValueRequest;
  response?: MessageEventStoreValueResponse;
  status: MessageEventStatus;
  timings: MessageEventTimings;
  traceId: string;
  tunnel?: MessageEventStoreValueTunnel;
}

/**
 * @minimum 0
 */
export type MessageEventTimingsProxyEnd = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsProxyStart = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsReponseBodyEnd = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsReponseBodyStart = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsRequestBodyEnd = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsRequestBodyStart = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsRequestEnd = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsRequestStart = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsTunnelEnd = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsTunnelStart = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsWebsocketEnd = number | null;

/**
 * @minimum 0
 */
export type MessageEventTimingsWebsocketStart = number | null;

export interface MessageEventTimings {
  /** @minimum 0 */
  proxyEnd?: MessageEventTimingsProxyEnd;
  /** @minimum 0 */
  proxyStart?: MessageEventTimingsProxyStart;
  /** @minimum 0 */
  reponseBodyEnd?: MessageEventTimingsReponseBodyEnd;
  /** @minimum 0 */
  reponseBodyStart?: MessageEventTimingsReponseBodyStart;
  /** @minimum 0 */
  requestBodyEnd?: MessageEventTimingsRequestBodyEnd;
  /** @minimum 0 */
  requestBodyStart?: MessageEventTimingsRequestBodyStart;
  /** @minimum 0 */
  requestEnd?: MessageEventTimingsRequestEnd;
  /** @minimum 0 */
  requestStart?: MessageEventTimingsRequestStart;
  /** @minimum 0 */
  tunnelEnd?: MessageEventTimingsTunnelEnd;
  /** @minimum 0 */
  tunnelStart?: MessageEventTimingsTunnelStart;
  /** @minimum 0 */
  websocketEnd?: MessageEventTimingsWebsocketEnd;
  /** @minimum 0 */
  websocketStart?: MessageEventTimingsWebsocketStart;
}

export interface MessageEventTunnel {
  status: TunnelStatus;
}

export interface MessageEventWebSocket {
  message: WebSocketLog[];
  status: WebSocketStatus;
}

/**
 * @minimum 0
 */
export type MessageHeaderSize = number;

export type ModifyRequestConfigModifyBody = string | null;

export type ModifyRequestConfigModifyHeadersAnyOf = { [key: string]: string };

export type ModifyRequestConfigModifyHeaders =
  ModifyRequestConfigModifyHeadersAnyOf | null;

export type ModifyRequestConfigModifyMethod = string | null;

export type ModifyRequestConfigModifyUrl = string | null;

/**
 * Modify request handler configuration
 */
export interface ModifyRequestConfig {
  modifyBody?: ModifyRequestConfigModifyBody;
  modifyHeaders?: ModifyRequestConfigModifyHeaders;
  modifyMethod?: ModifyRequestConfigModifyMethod;
  modifyUrl?: ModifyRequestConfigModifyUrl;
}

export type ModifyResponseConfigModifyBody = string | null;

export type ModifyResponseConfigModifyHeadersAnyOf = { [key: string]: string };

export type ModifyResponseConfigModifyHeaders =
  ModifyResponseConfigModifyHeadersAnyOf | null;

export type ModifyResponseConfigModifyMethod = string | null;

/**
 * @minimum 0
 */
export type ModifyResponseConfigModifyStatusCode = number | null;

/**
 * Modify request handler configuration
 */
export interface ModifyResponseConfig {
  modifyBody?: ModifyResponseConfigModifyBody;
  modifyHeaders?: ModifyResponseConfigModifyHeaders;
  modifyMethod?: ModifyResponseConfigModifyMethod;
  /** @minimum 0 */
  modifyStatusCode?: ModifyResponseConfigModifyStatusCode;
}

export type ProxyConfigUrl = string | null;

export interface ProxyConfig {
  type: string;
  url?: ProxyConfigUrl;
}

export type ProxyForwardConfigTargetAuthority = string | null;

export type ProxyForwardConfigTargetPath = string | null;

export type ProxyForwardConfigTargetScheme = string | null;

export interface ProxyForwardConfig {
  targetAuthority?: ProxyForwardConfigTargetAuthority;
  targetPath?: ProxyForwardConfigTargetPath;
  targetScheme?: ProxyForwardConfigTargetScheme;
}

export type RecordRequestsPatchRequests = MessageEventStoreValue[] | null;

export interface RecordRequests {
  newRequests: MessageEventStoreValue[];
  patchRequests?: RecordRequestsPatchRequests;
}

export type RecordingStatus =
  (typeof RecordingStatus)[keyof typeof RecordingStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RecordingStatus = {
  startRecording: 'startRecording',
  pauseRecording: 'pauseRecording',
} as const;

export type RequestRuleDescription = string | null;

export type RequestRuleId = number | null;

/**
 * ËØ∑Ê±ÇÂ§ÑÁêÜËßÑÂàô
 */
export interface RequestRule {
  capture: CaptureRule;
  description?: RequestRuleDescription;
  enabled: boolean;
  handlers: HandlerRule[];
  id?: RequestRuleId;
  name: string;
  priority: number;
}

/**
 * Request status enumeration
 */
export type RequestStatus = (typeof RequestStatus)[keyof typeof RequestStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RequestStatus = {
  pending: 'pending',
  success: 'success',
  failed: 'failed',
  timeout: 'timeout',
} as const;

export type ResponseCode = (typeof ResponseCode)[keyof typeof ResponseCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResponseCode = {
  ok: 'ok',
  validateError: 'validateError',
} as const;

/**
 * Paginated response for API debug entries
 */
export type ResponseDataWrapperApiDebugListResponseData = {
  data: ApiDebugResponse[];
  /** @minimum 0 */
  page: number;
  /** @minimum 0 */
  perPage: number;
  /** @minimum 0 */
  total: number;
  /** @minimum 0 */
  totalPages: number;
};

export type ResponseDataWrapperApiDebugListResponseMessage = string | null;

export interface ResponseDataWrapperApiDebugListResponse {
  code: ResponseCode;
  /** Paginated response for API debug entries */
  data: ResponseDataWrapperApiDebugListResponseData;
  message?: ResponseDataWrapperApiDebugListResponseMessage;
}

export type ResponseDataWrapperApiDebugResponseDataBody = string | null;

export type ResponseDataWrapperApiDebugResponseDataContentType = string | null;

export type ResponseDataWrapperApiDebugResponseDataErrorMessage = string | null;

export type ResponseDataWrapperApiDebugResponseDataHeaders = null | Value;

export type ResponseDataWrapperApiDebugResponseDataResponseBody = string | null;

export type ResponseDataWrapperApiDebugResponseDataResponseHeaders =
  null | Value;

export type ResponseDataWrapperApiDebugResponseDataResponseStatus =
  | number
  | null;

export type ResponseDataWrapperApiDebugResponseDataResponseTime = number | null;

export type ResponseDataWrapperApiDebugResponseDataTimeout = number | null;

/**
 * Response for API debug operations
 */
export type ResponseDataWrapperApiDebugResponseData = {
  body?: ResponseDataWrapperApiDebugResponseDataBody;
  contentType?: ResponseDataWrapperApiDebugResponseDataContentType;
  createdAt: number;
  errorMessage?: ResponseDataWrapperApiDebugResponseDataErrorMessage;
  headers?: ResponseDataWrapperApiDebugResponseDataHeaders;
  id: number;
  method: HttpMethod;
  name: string;
  responseBody?: ResponseDataWrapperApiDebugResponseDataResponseBody;
  responseHeaders?: ResponseDataWrapperApiDebugResponseDataResponseHeaders;
  responseStatus?: ResponseDataWrapperApiDebugResponseDataResponseStatus;
  responseTime?: ResponseDataWrapperApiDebugResponseDataResponseTime;
  status: RequestStatus;
  timeout?: ResponseDataWrapperApiDebugResponseDataTimeout;
  updatedAt: number;
  url: string;
};

export type ResponseDataWrapperApiDebugResponseMessage = string | null;

export interface ResponseDataWrapperApiDebugResponse {
  code: ResponseCode;
  /** Response for API debug operations */
  data: ResponseDataWrapperApiDebugResponseData;
  message?: ResponseDataWrapperApiDebugResponseMessage;
}

/**
 * Statistics for API debug entries
 */
export type ResponseDataWrapperApiDebugStatsData = {
  /** @minimum 0 */
  failedCount: number;
  /** @minimum 0 */
  pendingCount: number;
  /** @minimum 0 */
  successCount: number;
  /** @minimum 0 */
  total: number;
};

export type ResponseDataWrapperApiDebugStatsMessage = string | null;

export interface ResponseDataWrapperApiDebugStats {
  code: ResponseCode;
  /** Statistics for API debug entries */
  data: ResponseDataWrapperApiDebugStatsData;
  message?: ResponseDataWrapperApiDebugStatsMessage;
}

export type ResponseDataWrapperCaptureFilterData = {
  enabled: boolean;
  excludeDomains: DomainFilter[];
  includeDomains: DomainFilter[];
};

export type ResponseDataWrapperCaptureFilterMessage = string | null;

export interface ResponseDataWrapperCaptureFilter {
  code: ResponseCode;
  data: ResponseDataWrapperCaptureFilterData;
  message?: ResponseDataWrapperCaptureFilterMessage;
}

export type ResponseDataWrapperCaptureSwitchData = {
  recordingStatus: RecordingStatus;
};

export type ResponseDataWrapperCaptureSwitchMessage = string | null;

export interface ResponseDataWrapperCaptureSwitch {
  code: ResponseCode;
  data: ResponseDataWrapperCaptureSwitchData;
  message?: ResponseDataWrapperCaptureSwitchMessage;
}

export type ResponseDataWrapperClientProxyConfigData = {
  apiDebug: ProxyConfig;
  proxyRequests: ProxyConfig;
};

export type ResponseDataWrapperClientProxyConfigMessage = string | null;

export interface ResponseDataWrapperClientProxyConfig {
  code: ResponseCode;
  data: ResponseDataWrapperClientProxyConfigData;
  message?: ResponseDataWrapperClientProxyConfigMessage;
}

export type ResponseDataWrapperCreateRuleResponseData = {
  id: number;
};

export type ResponseDataWrapperCreateRuleResponseMessage = string | null;

export interface ResponseDataWrapperCreateRuleResponse {
  code: ResponseCode;
  data: ResponseDataWrapperCreateRuleResponseData;
  message?: ResponseDataWrapperCreateRuleResponseMessage;
}

/**
 * Error message if request failed
 */
export type ResponseDataWrapperExecuteApiDebugResponseDataErrorMessage =
  | string
  | null;

/**
 * Response body
 */
export type ResponseDataWrapperExecuteApiDebugResponseDataResponseBody =
  | string
  | null;

export type ResponseDataWrapperExecuteApiDebugResponseDataResponseHeaders =
  null | Value;

/**
 * HTTP response status code
 */
export type ResponseDataWrapperExecuteApiDebugResponseDataResponseStatus =
  | number
  | null;

/**
 * Response time in milliseconds
 */
export type ResponseDataWrapperExecuteApiDebugResponseDataResponseTime =
  | number
  | null;

/**
 * Response for executing an API debug entry
 */
export type ResponseDataWrapperExecuteApiDebugResponseData = {
  /** Error message if request failed */
  errorMessage?: ResponseDataWrapperExecuteApiDebugResponseDataErrorMessage;
  /** ID of the created debug entry */
  id: number;
  /** Response body */
  responseBody?: ResponseDataWrapperExecuteApiDebugResponseDataResponseBody;
  responseHeaders?: ResponseDataWrapperExecuteApiDebugResponseDataResponseHeaders;
  /** HTTP response status code */
  responseStatus?: ResponseDataWrapperExecuteApiDebugResponseDataResponseStatus;
  /** Response time in milliseconds */
  responseTime?: ResponseDataWrapperExecuteApiDebugResponseDataResponseTime;
  /** Request execution status */
  status: RequestStatus;
};

export type ResponseDataWrapperExecuteApiDebugResponseMessage = string | null;

export interface ResponseDataWrapperExecuteApiDebugResponse {
  code: ResponseCode;
  /** Response for executing an API debug entry */
  data: ResponseDataWrapperExecuteApiDebugResponseData;
  message?: ResponseDataWrapperExecuteApiDebugResponseMessage;
}

export type ResponseDataWrapperRecordRequestsDataPatchRequests =
  | MessageEventStoreValue[]
  | null;

export type ResponseDataWrapperRecordRequestsData = {
  newRequests: MessageEventStoreValue[];
  patchRequests?: ResponseDataWrapperRecordRequestsDataPatchRequests;
};

export type ResponseDataWrapperRecordRequestsMessage = string | null;

export interface ResponseDataWrapperRecordRequests {
  code: ResponseCode;
  data: ResponseDataWrapperRecordRequestsData;
  message?: ResponseDataWrapperRecordRequestsMessage;
}

export type ResponseDataWrapperRequestRuleDataDescription = string | null;

export type ResponseDataWrapperRequestRuleDataId = number | null;

/**
 * ËØ∑Ê±ÇÂ§ÑÁêÜËßÑÂàô
 */
export type ResponseDataWrapperRequestRuleData = {
  capture: CaptureRule;
  description?: ResponseDataWrapperRequestRuleDataDescription;
  enabled: boolean;
  handlers: HandlerRule[];
  id?: ResponseDataWrapperRequestRuleDataId;
  name: string;
  priority: number;
};

export type ResponseDataWrapperRequestRuleMessage = string | null;

export interface ResponseDataWrapperRequestRule {
  code: ResponseCode;
  /** ËØ∑Ê±ÇÂ§ÑÁêÜËßÑÂàô */
  data: ResponseDataWrapperRequestRuleData;
  message?: ResponseDataWrapperRequestRuleMessage;
}

export type ResponseDataWrapperRuleListResponseData = {
  /** @minimum 0 */
  page: number;
  /** @minimum 0 */
  pageSize: number;
  rules: RequestRule[];
  /** @minimum 0 */
  total: number;
};

export type ResponseDataWrapperRuleListResponseMessage = string | null;

export interface ResponseDataWrapperRuleListResponse {
  code: ResponseCode;
  data: ResponseDataWrapperRuleListResponseData;
  message?: ResponseDataWrapperRuleListResponseMessage;
}

export type ResponseDataWrapperStringMessage = string | null;

export interface ResponseDataWrapperString {
  code: ResponseCode;
  data: string;
  message?: ResponseDataWrapperStringMessage;
}

export type ResponseDataWrapperTemplateHandlersResponseData = {
  handlers: HandlerRule[];
};

export type ResponseDataWrapperTemplateHandlersResponseMessage = string | null;

export interface ResponseDataWrapperTemplateHandlersResponse {
  code: ResponseCode;
  data: ResponseDataWrapperTemplateHandlersResponseData;
  message?: ResponseDataWrapperTemplateHandlersResponseMessage;
}

export type ResponseDataWrapperTupleUnitMessage = string | null;

export interface ResponseDataWrapperTupleUnit {
  code: ResponseCode;
  data: unknown;
  message?: ResponseDataWrapperTupleUnitMessage;
}

export type ResponseDataWrapperU64Message = string | null;

export interface ResponseDataWrapperU64 {
  code: ResponseCode;
  /** @minimum 0 */
  data: number;
  message?: ResponseDataWrapperU64Message;
}

export interface RuleListResponse {
  /** @minimum 0 */
  page: number;
  /** @minimum 0 */
  pageSize: number;
  rules: RequestRule[];
  /** @minimum 0 */
  total: number;
}

export type SimpleCaptureConditionHeadersAnyOfItem = { [key: string]: string };

export type SimpleCaptureConditionHeaders =
  | SimpleCaptureConditionHeadersAnyOfItem[]
  | null;

export type SimpleCaptureConditionHost = string | null;

export type SimpleCaptureConditionMethod = string | null;

export type SimpleCaptureConditionUrlPattern = null | UrlPattern;

/**
 * ÁÆÄÂçïÊçïËé∑Êù°‰ª∂
 */
export interface SimpleCaptureCondition {
  headers?: SimpleCaptureConditionHeaders;
  host?: SimpleCaptureConditionHost;
  method?: SimpleCaptureConditionMethod;
  urlPattern?: SimpleCaptureConditionUrlPattern;
}

export interface TemplateHandlersResponse {
  handlers: HandlerRule[];
}

export interface ToggleRuleRequest {
  enabled: boolean;
}

export type TunnelStatus = (typeof TunnelStatus)[keyof typeof TunnelStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TunnelStatus = {
  Connected: 'Connected',
  Disconnected: 'Disconnected',
} as const;

export interface TupleUnit {}

export type UpdateApiDebugRequestBody = string | null;

export type UpdateApiDebugRequestContentType = string | null;

export type UpdateApiDebugRequestErrorMessage = string | null;

export type UpdateApiDebugRequestHeaders = null | Value;

export type UpdateApiDebugRequestMethod = null | HttpMethod;

export type UpdateApiDebugRequestName = string | null;

export type UpdateApiDebugRequestResponseBody = string | null;

export type UpdateApiDebugRequestResponseHeaders = null | Value;

export type UpdateApiDebugRequestResponseStatus = number | null;

export type UpdateApiDebugRequestResponseTime = number | null;

export type UpdateApiDebugRequestStatus = null | RequestStatus;

export type UpdateApiDebugRequestTimeout = number | null;

export type UpdateApiDebugRequestUrl = string | null;

/**
 * Request for updating an API debug entry
 */
export interface UpdateApiDebugRequest {
  body?: UpdateApiDebugRequestBody;
  contentType?: UpdateApiDebugRequestContentType;
  errorMessage?: UpdateApiDebugRequestErrorMessage;
  headers?: UpdateApiDebugRequestHeaders;
  method?: UpdateApiDebugRequestMethod;
  name?: UpdateApiDebugRequestName;
  responseBody?: UpdateApiDebugRequestResponseBody;
  responseHeaders?: UpdateApiDebugRequestResponseHeaders;
  responseStatus?: UpdateApiDebugRequestResponseStatus;
  responseTime?: UpdateApiDebugRequestResponseTime;
  status?: UpdateApiDebugRequestStatus;
  timeout?: UpdateApiDebugRequestTimeout;
  url?: UpdateApiDebugRequestUrl;
}

export type UpdateRuleRequestDescription = string | null;

export interface UpdateRuleRequest {
  capture: CaptureRule;
  description?: UpdateRuleRequestDescription;
  enabled: boolean;
  handlers: HandlerRule[];
  name: string;
  priority: number;
}

export interface UrlPattern {
  captureType: CaptureType;
  pattern: string;
}

export interface Value {}

export type WebSocketDirection =
  (typeof WebSocketDirection)[keyof typeof WebSocketDirection];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WebSocketDirection = {
  ClientToServer: 'ClientToServer',
  ServerToClient: 'ServerToClient',
} as const;

export interface WebSocketLog {
  direction: WebSocketDirection;
  message: WebSocketMessage;
  /** @minimum 0 */
  timestamp: number;
}

export type WebSocketMessageOneOfText = null | MessageEventBody;

export type WebSocketMessageOneOf = {
  text: WebSocketMessageOneOfText;
};

export type WebSocketMessageOneOfThreeBinary = null | MessageEventBody;

export type WebSocketMessageOneOfThree = {
  binary: WebSocketMessageOneOfThreeBinary;
};

export type WebSocketMessageOneOfFivePing = null | MessageEventBody;

export type WebSocketMessageOneOfFive = {
  ping: WebSocketMessageOneOfFivePing;
};

export type WebSocketMessageOneOfSevenPong = null | MessageEventBody;

export type WebSocketMessageOneOfSeven = {
  pong: WebSocketMessageOneOfSevenPong;
};

export type WebSocketMessageOneOfNineClose = [number, string] | null;

export type WebSocketMessageOneOfNine = {
  close: WebSocketMessageOneOfNineClose;
};

export type WebSocketMessage =
  | WebSocketMessageOneOf
  | WebSocketMessageOneOfThree
  | WebSocketMessageOneOfFive
  | WebSocketMessageOneOfSeven
  | WebSocketMessageOneOfNine;

export type WebSocketStatusOneOf = {
  Error: string;
};

export type WebSocketStatus =
  | 'Start'
  | 'Connected'
  | 'Disconnected'
  | WebSocketStatusOneOf;

export type ListDebugEntriesParams = {
  /**
   * Page number, starting from 1
   */
  page?: number | null;
  /**
   * Number of items per page, default 20
   */
  perPage?: number | null;
  /**
   * Filter by HTTP method
   */
  method?: null | HttpMethod;
  /**
   * Filter by request status
   */
  status?: null | RequestStatus;
  /**
   * Search in name and URL
   */
  search?: string | null;
};

export type ListRulesParams = {
  page?: number | null;
  pageSize?: number | null;
  enabledOnly?: boolean | null;
  name?: string | null;
};
