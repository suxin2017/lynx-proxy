/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  CreateFolderRequest,
  CreateRequestNodeRequest,
  DeleteNodeParams,
  GetChildrenParams,
  GetNodeParams,
  GetNodePathParams,
  MoveNodeParams,
  MoveNodeRequest,
  RenameNodeParams,
  RenameNodeRequest,
  ReorderNodesParams,
  ReorderNodesRequest,
  ResponseDataWrapperTreeNodeResponse,
  ResponseDataWrapperTreeResponse,
  ResponseDataWrapperTupleUnit,
  ResponseDataWrapperVecTreeNodeResponse,
  SearchNodesParams,
} from '../utoipaAxum.schemas';

import { customInstance } from '../../customInstance';

export const getTree = (signal?: AbortSignal) => {
  return customInstance<ResponseDataWrapperTreeResponse>({
    url: `/api_debug_tree/tree`,
    method: 'GET',
    signal,
  });
};

export const getGetTreeQueryKey = () => {
  return [`/api_debug_tree/tree`] as const;
};

export const getGetTreeQueryOptions = <
  TData = Awaited<ReturnType<typeof getTree>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTree>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTreeQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTree>>> = ({
    signal,
  }) => getTree(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTree>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTreeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTree>>
>;
export type GetTreeQueryError = void;

export function useGetTree<
  TData = Awaited<ReturnType<typeof getTree>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTree>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTree>>,
          TError,
          Awaited<ReturnType<typeof getTree>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTree<
  TData = Awaited<ReturnType<typeof getTree>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTree>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTree>>,
          TError,
          Awaited<ReturnType<typeof getTree>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTree<
  TData = Awaited<ReturnType<typeof getTree>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTree>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetTree<
  TData = Awaited<ReturnType<typeof getTree>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTree>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTreeQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getChildren = (
  params?: GetChildrenParams,
  signal?: AbortSignal,
) => {
  return customInstance<ResponseDataWrapperVecTreeNodeResponse>({
    url: `/api_debug_tree/tree/children`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetChildrenQueryKey = (params?: GetChildrenParams) => {
  return [
    `/api_debug_tree/tree/children`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetChildrenQueryOptions = <
  TData = Awaited<ReturnType<typeof getChildren>>,
  TError = void,
>(
  params?: GetChildrenParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getChildren>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChildrenQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getChildren>>> = ({
    signal,
  }) => getChildren(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getChildren>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetChildrenQueryResult = NonNullable<
  Awaited<ReturnType<typeof getChildren>>
>;
export type GetChildrenQueryError = void;

export function useGetChildren<
  TData = Awaited<ReturnType<typeof getChildren>>,
  TError = void,
>(
  params: undefined | GetChildrenParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getChildren>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChildren>>,
          TError,
          Awaited<ReturnType<typeof getChildren>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChildren<
  TData = Awaited<ReturnType<typeof getChildren>>,
  TError = void,
>(
  params?: GetChildrenParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getChildren>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChildren>>,
          TError,
          Awaited<ReturnType<typeof getChildren>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetChildren<
  TData = Awaited<ReturnType<typeof getChildren>>,
  TError = void,
>(
  params?: GetChildrenParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getChildren>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetChildren<
  TData = Awaited<ReturnType<typeof getChildren>>,
  TError = void,
>(
  params?: GetChildrenParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getChildren>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetChildrenQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createFolder = (
  createFolderRequest: CreateFolderRequest,
  signal?: AbortSignal,
) => {
  return customInstance<ResponseDataWrapperTreeNodeResponse>({
    url: `/api_debug_tree/tree/folder`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createFolderRequest,
    signal,
  });
};

export const getCreateFolderMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createFolder>>,
    TError,
    { data: CreateFolderRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createFolder>>,
  TError,
  { data: CreateFolderRequest },
  TContext
> => {
  const mutationKey = ['createFolder'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createFolder>>,
    { data: CreateFolderRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createFolder(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateFolderMutationResult = NonNullable<
  Awaited<ReturnType<typeof createFolder>>
>;
export type CreateFolderMutationBody = CreateFolderRequest;
export type CreateFolderMutationError = void;

export const useCreateFolder = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createFolder>>,
      TError,
      { data: CreateFolderRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createFolder>>,
  TError,
  { data: CreateFolderRequest },
  TContext
> => {
  const mutationOptions = getCreateFolderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const moveNode = (
  moveNodeRequest: MoveNodeRequest,
  params: MoveNodeParams,
) => {
  return customInstance<ResponseDataWrapperTreeNodeResponse>({
    url: `/api_debug_tree/tree/move`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: moveNodeRequest,
    params,
  });
};

export const getMoveNodeMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof moveNode>>,
    TError,
    { data: MoveNodeRequest; params: MoveNodeParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof moveNode>>,
  TError,
  { data: MoveNodeRequest; params: MoveNodeParams },
  TContext
> => {
  const mutationKey = ['moveNode'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof moveNode>>,
    { data: MoveNodeRequest; params: MoveNodeParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return moveNode(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type MoveNodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof moveNode>>
>;
export type MoveNodeMutationBody = MoveNodeRequest;
export type MoveNodeMutationError = void;

export const useMoveNode = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof moveNode>>,
      TError,
      { data: MoveNodeRequest; params: MoveNodeParams },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof moveNode>>,
  TError,
  { data: MoveNodeRequest; params: MoveNodeParams },
  TContext
> => {
  const mutationOptions = getMoveNodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getNode = (params: GetNodeParams, signal?: AbortSignal) => {
  return customInstance<ResponseDataWrapperTreeNodeResponse>({
    url: `/api_debug_tree/tree/node`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetNodeQueryKey = (params: GetNodeParams) => {
  return [`/api_debug_tree/tree/node`, ...(params ? [params] : [])] as const;
};

export const getGetNodeQueryOptions = <
  TData = Awaited<ReturnType<typeof getNode>>,
  TError = void,
>(
  params: GetNodeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNode>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNodeQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNode>>> = ({
    signal,
  }) => getNode(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getNode>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNodeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNode>>
>;
export type GetNodeQueryError = void;

export function useGetNode<
  TData = Awaited<ReturnType<typeof getNode>>,
  TError = void,
>(
  params: GetNodeParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNode>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNode>>,
          TError,
          Awaited<ReturnType<typeof getNode>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNode<
  TData = Awaited<ReturnType<typeof getNode>>,
  TError = void,
>(
  params: GetNodeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNode>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNode>>,
          TError,
          Awaited<ReturnType<typeof getNode>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNode<
  TData = Awaited<ReturnType<typeof getNode>>,
  TError = void,
>(
  params: GetNodeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNode>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetNode<
  TData = Awaited<ReturnType<typeof getNode>>,
  TError = void,
>(
  params: GetNodeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNode>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetNodeQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteNode = (params: DeleteNodeParams) => {
  return customInstance<ResponseDataWrapperTupleUnit>({
    url: `/api_debug_tree/tree/node`,
    method: 'DELETE',
    params,
  });
};

export const getDeleteNodeMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNode>>,
    TError,
    { params: DeleteNodeParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteNode>>,
  TError,
  { params: DeleteNodeParams },
  TContext
> => {
  const mutationKey = ['deleteNode'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteNode>>,
    { params: DeleteNodeParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteNode(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteNodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteNode>>
>;

export type DeleteNodeMutationError = void;

export const useDeleteNode = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteNode>>,
      TError,
      { params: DeleteNodeParams },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteNode>>,
  TError,
  { params: DeleteNodeParams },
  TContext
> => {
  const mutationOptions = getDeleteNodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getNodePath = (
  params: GetNodePathParams,
  signal?: AbortSignal,
) => {
  return customInstance<ResponseDataWrapperVecTreeNodeResponse>({
    url: `/api_debug_tree/tree/path`,
    method: 'GET',
    params,
    signal,
  });
};

export const getGetNodePathQueryKey = (params: GetNodePathParams) => {
  return [`/api_debug_tree/tree/path`, ...(params ? [params] : [])] as const;
};

export const getGetNodePathQueryOptions = <
  TData = Awaited<ReturnType<typeof getNodePath>>,
  TError = void,
>(
  params: GetNodePathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNodePath>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNodePathQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNodePath>>> = ({
    signal,
  }) => getNodePath(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getNodePath>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetNodePathQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNodePath>>
>;
export type GetNodePathQueryError = void;

export function useGetNodePath<
  TData = Awaited<ReturnType<typeof getNodePath>>,
  TError = void,
>(
  params: GetNodePathParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNodePath>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNodePath>>,
          TError,
          Awaited<ReturnType<typeof getNodePath>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNodePath<
  TData = Awaited<ReturnType<typeof getNodePath>>,
  TError = void,
>(
  params: GetNodePathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNodePath>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNodePath>>,
          TError,
          Awaited<ReturnType<typeof getNodePath>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetNodePath<
  TData = Awaited<ReturnType<typeof getNodePath>>,
  TError = void,
>(
  params: GetNodePathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNodePath>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetNodePath<
  TData = Awaited<ReturnType<typeof getNodePath>>,
  TError = void,
>(
  params: GetNodePathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNodePath>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetNodePathQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const renameNode = (
  renameNodeRequest: RenameNodeRequest,
  params: RenameNodeParams,
) => {
  return customInstance<ResponseDataWrapperTreeNodeResponse>({
    url: `/api_debug_tree/tree/rename`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: renameNodeRequest,
    params,
  });
};

export const getRenameNodeMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof renameNode>>,
    TError,
    { data: RenameNodeRequest; params: RenameNodeParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof renameNode>>,
  TError,
  { data: RenameNodeRequest; params: RenameNodeParams },
  TContext
> => {
  const mutationKey = ['renameNode'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof renameNode>>,
    { data: RenameNodeRequest; params: RenameNodeParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return renameNode(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type RenameNodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof renameNode>>
>;
export type RenameNodeMutationBody = RenameNodeRequest;
export type RenameNodeMutationError = void;

export const useRenameNode = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof renameNode>>,
      TError,
      { data: RenameNodeRequest; params: RenameNodeParams },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof renameNode>>,
  TError,
  { data: RenameNodeRequest; params: RenameNodeParams },
  TContext
> => {
  const mutationOptions = getRenameNodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const reorderNodes = (
  reorderNodesRequest: ReorderNodesRequest,
  params?: ReorderNodesParams,
) => {
  return customInstance<ResponseDataWrapperTupleUnit>({
    url: `/api_debug_tree/tree/reorder`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: reorderNodesRequest,
    params,
  });
};

export const getReorderNodesMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reorderNodes>>,
    TError,
    { data: ReorderNodesRequest; params?: ReorderNodesParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof reorderNodes>>,
  TError,
  { data: ReorderNodesRequest; params?: ReorderNodesParams },
  TContext
> => {
  const mutationKey = ['reorderNodes'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof reorderNodes>>,
    { data: ReorderNodesRequest; params?: ReorderNodesParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return reorderNodes(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReorderNodesMutationResult = NonNullable<
  Awaited<ReturnType<typeof reorderNodes>>
>;
export type ReorderNodesMutationBody = ReorderNodesRequest;
export type ReorderNodesMutationError = void;

export const useReorderNodes = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof reorderNodes>>,
      TError,
      { data: ReorderNodesRequest; params?: ReorderNodesParams },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof reorderNodes>>,
  TError,
  { data: ReorderNodesRequest; params?: ReorderNodesParams },
  TContext
> => {
  const mutationOptions = getReorderNodesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const createRequestNode = (
  createRequestNodeRequest: CreateRequestNodeRequest,
  signal?: AbortSignal,
) => {
  return customInstance<ResponseDataWrapperTreeNodeResponse>({
    url: `/api_debug_tree/tree/request`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createRequestNodeRequest,
    signal,
  });
};

export const getCreateRequestNodeMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRequestNode>>,
    TError,
    { data: CreateRequestNodeRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createRequestNode>>,
  TError,
  { data: CreateRequestNodeRequest },
  TContext
> => {
  const mutationKey = ['createRequestNode'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createRequestNode>>,
    { data: CreateRequestNodeRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createRequestNode(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateRequestNodeMutationResult = NonNullable<
  Awaited<ReturnType<typeof createRequestNode>>
>;
export type CreateRequestNodeMutationBody = CreateRequestNodeRequest;
export type CreateRequestNodeMutationError = void;

export const useCreateRequestNode = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createRequestNode>>,
      TError,
      { data: CreateRequestNodeRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createRequestNode>>,
  TError,
  { data: CreateRequestNodeRequest },
  TContext
> => {
  const mutationOptions = getCreateRequestNodeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const searchNodes = (
  params: SearchNodesParams,
  signal?: AbortSignal,
) => {
  return customInstance<ResponseDataWrapperVecTreeNodeResponse>({
    url: `/api_debug_tree/tree/search`,
    method: 'GET',
    params,
    signal,
  });
};

export const getSearchNodesQueryKey = (params: SearchNodesParams) => {
  return [`/api_debug_tree/tree/search`, ...(params ? [params] : [])] as const;
};

export const getSearchNodesQueryOptions = <
  TData = Awaited<ReturnType<typeof searchNodes>>,
  TError = void,
>(
  params: SearchNodesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchNodes>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getSearchNodesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof searchNodes>>> = ({
    signal,
  }) => searchNodes(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof searchNodes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type SearchNodesQueryResult = NonNullable<
  Awaited<ReturnType<typeof searchNodes>>
>;
export type SearchNodesQueryError = void;

export function useSearchNodes<
  TData = Awaited<ReturnType<typeof searchNodes>>,
  TError = void,
>(
  params: SearchNodesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchNodes>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchNodes>>,
          TError,
          Awaited<ReturnType<typeof searchNodes>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchNodes<
  TData = Awaited<ReturnType<typeof searchNodes>>,
  TError = void,
>(
  params: SearchNodesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchNodes>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchNodes>>,
          TError,
          Awaited<ReturnType<typeof searchNodes>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useSearchNodes<
  TData = Awaited<ReturnType<typeof searchNodes>>,
  TError = void,
>(
  params: SearchNodesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchNodes>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useSearchNodes<
  TData = Awaited<ReturnType<typeof searchNodes>>,
  TError = void,
>(
  params: SearchNodesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof searchNodes>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getSearchNodesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
