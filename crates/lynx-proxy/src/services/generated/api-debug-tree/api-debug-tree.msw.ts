/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';

import { NodeType, ResponseCode } from '../utoipaAxum.schemas';
import type {
  ResponseDataWrapperTreeNodeResponse,
  ResponseDataWrapperTreeResponse,
  ResponseDataWrapperTupleUnit,
  ResponseDataWrapperVecTreeNodeResponse,
} from '../utoipaAxum.schemas';

export const getGetTreeResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTreeResponse> = {},
): ResponseDataWrapperTreeResponse => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    nodes: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      apiDebugId: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      children: faker.helpers.arrayElement([
        faker.helpers.arrayElement([[], null]),
        undefined,
      ]),
      createdAt: faker.number.int({ min: undefined, max: undefined }),
      id: faker.number.int({ min: undefined, max: undefined }),
      name: faker.string.alpha(20),
      nodeType: faker.helpers.arrayElement(Object.values(NodeType)),
      parentId: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      sortOrder: faker.number.int({ min: undefined, max: undefined }),
      updatedAt: faker.number.int({ min: undefined, max: undefined }),
    })),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetChildrenResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperVecTreeNodeResponse> = {},
): ResponseDataWrapperVecTreeNodeResponse => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    apiDebugId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    children: faker.helpers.arrayElement([
      faker.helpers.arrayElement([[], null]),
      undefined,
    ]),
    createdAt: faker.number.int({ min: undefined, max: undefined }),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.string.alpha(20),
    nodeType: faker.helpers.arrayElement(Object.values(NodeType)),
    parentId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    sortOrder: faker.number.int({ min: undefined, max: undefined }),
    updatedAt: faker.number.int({ min: undefined, max: undefined }),
  })),
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreateFolderResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTreeNodeResponse> = {},
): ResponseDataWrapperTreeNodeResponse => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    apiDebugId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    children: faker.helpers.arrayElement([
      faker.helpers.arrayElement([[], null]),
      undefined,
    ]),
    createdAt: faker.number.int({ min: undefined, max: undefined }),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.string.alpha(20),
    nodeType: faker.helpers.arrayElement(Object.values(NodeType)),
    parentId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    sortOrder: faker.number.int({ min: undefined, max: undefined }),
    updatedAt: faker.number.int({ min: undefined, max: undefined }),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getMoveNodeResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTreeNodeResponse> = {},
): ResponseDataWrapperTreeNodeResponse => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    apiDebugId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    children: faker.helpers.arrayElement([
      faker.helpers.arrayElement([[], null]),
      undefined,
    ]),
    createdAt: faker.number.int({ min: undefined, max: undefined }),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.string.alpha(20),
    nodeType: faker.helpers.arrayElement(Object.values(NodeType)),
    parentId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    sortOrder: faker.number.int({ min: undefined, max: undefined }),
    updatedAt: faker.number.int({ min: undefined, max: undefined }),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetNodeResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTreeNodeResponse> = {},
): ResponseDataWrapperTreeNodeResponse => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    apiDebugId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    children: faker.helpers.arrayElement([
      faker.helpers.arrayElement([[], null]),
      undefined,
    ]),
    createdAt: faker.number.int({ min: undefined, max: undefined }),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.string.alpha(20),
    nodeType: faker.helpers.arrayElement(Object.values(NodeType)),
    parentId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    sortOrder: faker.number.int({ min: undefined, max: undefined }),
    updatedAt: faker.number.int({ min: undefined, max: undefined }),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteNodeResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTupleUnit> = {},
): ResponseDataWrapperTupleUnit => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {},
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetNodePathResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperVecTreeNodeResponse> = {},
): ResponseDataWrapperVecTreeNodeResponse => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    apiDebugId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    children: faker.helpers.arrayElement([
      faker.helpers.arrayElement([[], null]),
      undefined,
    ]),
    createdAt: faker.number.int({ min: undefined, max: undefined }),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.string.alpha(20),
    nodeType: faker.helpers.arrayElement(Object.values(NodeType)),
    parentId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    sortOrder: faker.number.int({ min: undefined, max: undefined }),
    updatedAt: faker.number.int({ min: undefined, max: undefined }),
  })),
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getRenameNodeResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTreeNodeResponse> = {},
): ResponseDataWrapperTreeNodeResponse => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    apiDebugId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    children: faker.helpers.arrayElement([
      faker.helpers.arrayElement([[], null]),
      undefined,
    ]),
    createdAt: faker.number.int({ min: undefined, max: undefined }),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.string.alpha(20),
    nodeType: faker.helpers.arrayElement(Object.values(NodeType)),
    parentId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    sortOrder: faker.number.int({ min: undefined, max: undefined }),
    updatedAt: faker.number.int({ min: undefined, max: undefined }),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getReorderNodesResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTupleUnit> = {},
): ResponseDataWrapperTupleUnit => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {},
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreateRequestNodeResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTreeNodeResponse> = {},
): ResponseDataWrapperTreeNodeResponse => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    apiDebugId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    children: faker.helpers.arrayElement([
      faker.helpers.arrayElement([[], null]),
      undefined,
    ]),
    createdAt: faker.number.int({ min: undefined, max: undefined }),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.string.alpha(20),
    nodeType: faker.helpers.arrayElement(Object.values(NodeType)),
    parentId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    sortOrder: faker.number.int({ min: undefined, max: undefined }),
    updatedAt: faker.number.int({ min: undefined, max: undefined }),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSearchNodesResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperVecTreeNodeResponse> = {},
): ResponseDataWrapperVecTreeNodeResponse => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    apiDebugId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    children: faker.helpers.arrayElement([
      faker.helpers.arrayElement([[], null]),
      undefined,
    ]),
    createdAt: faker.number.int({ min: undefined, max: undefined }),
    id: faker.number.int({ min: undefined, max: undefined }),
    name: faker.string.alpha(20),
    nodeType: faker.helpers.arrayElement(Object.values(NodeType)),
    parentId: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    sortOrder: faker.number.int({ min: undefined, max: undefined }),
    updatedAt: faker.number.int({ min: undefined, max: undefined }),
  })),
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetTreeMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTreeResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTreeResponse>
        | ResponseDataWrapperTreeResponse),
) => {
  return http.get('*/api_debug_tree/tree', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTreeResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetChildrenMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperVecTreeNodeResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperVecTreeNodeResponse>
        | ResponseDataWrapperVecTreeNodeResponse),
) => {
  return http.get('*/api_debug_tree/tree/children', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetChildrenResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getCreateFolderMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTreeNodeResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTreeNodeResponse>
        | ResponseDataWrapperTreeNodeResponse),
) => {
  return http.post('*/api_debug_tree/tree/folder', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateFolderResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getMoveNodeMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTreeNodeResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTreeNodeResponse>
        | ResponseDataWrapperTreeNodeResponse),
) => {
  return http.put('*/api_debug_tree/tree/move', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getMoveNodeResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetNodeMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTreeNodeResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTreeNodeResponse>
        | ResponseDataWrapperTreeNodeResponse),
) => {
  return http.get('*/api_debug_tree/tree/node', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetNodeResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getDeleteNodeMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTupleUnit
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTupleUnit>
        | ResponseDataWrapperTupleUnit),
) => {
  return http.delete('*/api_debug_tree/tree/node', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteNodeResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetNodePathMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperVecTreeNodeResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperVecTreeNodeResponse>
        | ResponseDataWrapperVecTreeNodeResponse),
) => {
  return http.get('*/api_debug_tree/tree/path', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetNodePathResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getRenameNodeMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTreeNodeResponse
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTreeNodeResponse>
        | ResponseDataWrapperTreeNodeResponse),
) => {
  return http.put('*/api_debug_tree/tree/rename', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getRenameNodeResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getReorderNodesMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTupleUnit
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTupleUnit>
        | ResponseDataWrapperTupleUnit),
) => {
  return http.put('*/api_debug_tree/tree/reorder', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getReorderNodesResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getCreateRequestNodeMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTreeNodeResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTreeNodeResponse>
        | ResponseDataWrapperTreeNodeResponse),
) => {
  return http.post('*/api_debug_tree/tree/request', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateRequestNodeResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getSearchNodesMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperVecTreeNodeResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperVecTreeNodeResponse>
        | ResponseDataWrapperVecTreeNodeResponse),
) => {
  return http.get('*/api_debug_tree/tree/search', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getSearchNodesResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};
export const getApiDebugTreeMock = () => [
  getGetTreeMockHandler(),
  getGetChildrenMockHandler(),
  getCreateFolderMockHandler(),
  getMoveNodeMockHandler(),
  getGetNodeMockHandler(),
  getDeleteNodeMockHandler(),
  getGetNodePathMockHandler(),
  getRenameNodeMockHandler(),
  getReorderNodesMockHandler(),
  getCreateRequestNodeMockHandler(),
  getSearchNodesMockHandler(),
];
