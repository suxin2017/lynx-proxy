/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  BatchRuleIdsRequest,
  CreateRuleRequest,
  ListRulesParams,
  ResponseDataWrapperCreateRuleResponse,
  ResponseDataWrapperRequestRule,
  ResponseDataWrapperRuleListResponse,
  ResponseDataWrapperTemplateHandlersResponse,
  ResponseDataWrapperTupleUnit,
  ToggleRuleRequest,
  UpdateRuleRequest,
} from '../utoipaAxum.schemas';

import { customInstance } from '../../customInstance';

export const createRule = (
  createRuleRequest: CreateRuleRequest,
  signal?: AbortSignal,
) => {
  return customInstance<ResponseDataWrapperCreateRuleResponse>({
    url: `/request_processing/rule`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: createRuleRequest,
    signal,
  });
};

export const getCreateRuleMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRule>>,
    TError,
    { data: CreateRuleRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createRule>>,
  TError,
  { data: CreateRuleRequest },
  TContext
> => {
  const mutationKey = ['createRule'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createRule>>,
    { data: CreateRuleRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createRule(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateRuleMutationResult = NonNullable<
  Awaited<ReturnType<typeof createRule>>
>;
export type CreateRuleMutationBody = CreateRuleRequest;
export type CreateRuleMutationError = void;

export const useCreateRule = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createRule>>,
      TError,
      { data: CreateRuleRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createRule>>,
  TError,
  { data: CreateRuleRequest },
  TContext
> => {
  const mutationOptions = getCreateRuleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const listRules = (params?: ListRulesParams, signal?: AbortSignal) => {
  return customInstance<ResponseDataWrapperRuleListResponse>({
    url: `/request_processing/rules`,
    method: 'GET',
    params,
    signal,
  });
};

export const getListRulesQueryKey = (params?: ListRulesParams) => {
  return [`/request_processing/rules`, ...(params ? [params] : [])] as const;
};

export const getListRulesQueryOptions = <
  TData = Awaited<ReturnType<typeof listRules>>,
  TError = void,
>(
  params?: ListRulesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listRules>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListRulesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listRules>>> = ({
    signal,
  }) => listRules(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listRules>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListRulesQueryResult = NonNullable<
  Awaited<ReturnType<typeof listRules>>
>;
export type ListRulesQueryError = void;

export function useListRules<
  TData = Awaited<ReturnType<typeof listRules>>,
  TError = void,
>(
  params: undefined | ListRulesParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listRules>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listRules>>,
          TError,
          Awaited<ReturnType<typeof listRules>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListRules<
  TData = Awaited<ReturnType<typeof listRules>>,
  TError = void,
>(
  params?: ListRulesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listRules>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listRules>>,
          TError,
          Awaited<ReturnType<typeof listRules>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListRules<
  TData = Awaited<ReturnType<typeof listRules>>,
  TError = void,
>(
  params?: ListRulesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listRules>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useListRules<
  TData = Awaited<ReturnType<typeof listRules>>,
  TError = void,
>(
  params?: ListRulesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listRules>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListRulesQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const batchDeleteRules = (
  batchRuleIdsRequest: BatchRuleIdsRequest,
  signal?: AbortSignal,
) => {
  return customInstance<ResponseDataWrapperTupleUnit>({
    url: `/request_processing/rules/batch-delete`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: batchRuleIdsRequest,
    signal,
  });
};

export const getBatchDeleteRulesMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof batchDeleteRules>>,
    TError,
    { data: BatchRuleIdsRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof batchDeleteRules>>,
  TError,
  { data: BatchRuleIdsRequest },
  TContext
> => {
  const mutationKey = ['batchDeleteRules'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof batchDeleteRules>>,
    { data: BatchRuleIdsRequest }
  > = (props) => {
    const { data } = props ?? {};

    return batchDeleteRules(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type BatchDeleteRulesMutationResult = NonNullable<
  Awaited<ReturnType<typeof batchDeleteRules>>
>;
export type BatchDeleteRulesMutationBody = BatchRuleIdsRequest;
export type BatchDeleteRulesMutationError = void;

export const useBatchDeleteRules = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof batchDeleteRules>>,
      TError,
      { data: BatchRuleIdsRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof batchDeleteRules>>,
  TError,
  { data: BatchRuleIdsRequest },
  TContext
> => {
  const mutationOptions = getBatchDeleteRulesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const batchDisableRules = (
  batchRuleIdsRequest: BatchRuleIdsRequest,
  signal?: AbortSignal,
) => {
  return customInstance<ResponseDataWrapperTupleUnit>({
    url: `/request_processing/rules/batch-disable`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: batchRuleIdsRequest,
    signal,
  });
};

export const getBatchDisableRulesMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof batchDisableRules>>,
    TError,
    { data: BatchRuleIdsRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof batchDisableRules>>,
  TError,
  { data: BatchRuleIdsRequest },
  TContext
> => {
  const mutationKey = ['batchDisableRules'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof batchDisableRules>>,
    { data: BatchRuleIdsRequest }
  > = (props) => {
    const { data } = props ?? {};

    return batchDisableRules(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type BatchDisableRulesMutationResult = NonNullable<
  Awaited<ReturnType<typeof batchDisableRules>>
>;
export type BatchDisableRulesMutationBody = BatchRuleIdsRequest;
export type BatchDisableRulesMutationError = void;

export const useBatchDisableRules = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof batchDisableRules>>,
      TError,
      { data: BatchRuleIdsRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof batchDisableRules>>,
  TError,
  { data: BatchRuleIdsRequest },
  TContext
> => {
  const mutationOptions = getBatchDisableRulesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const batchEnableRules = (
  batchRuleIdsRequest: BatchRuleIdsRequest,
  signal?: AbortSignal,
) => {
  return customInstance<ResponseDataWrapperTupleUnit>({
    url: `/request_processing/rules/batch-enable`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: batchRuleIdsRequest,
    signal,
  });
};

export const getBatchEnableRulesMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof batchEnableRules>>,
    TError,
    { data: BatchRuleIdsRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof batchEnableRules>>,
  TError,
  { data: BatchRuleIdsRequest },
  TContext
> => {
  const mutationKey = ['batchEnableRules'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof batchEnableRules>>,
    { data: BatchRuleIdsRequest }
  > = (props) => {
    const { data } = props ?? {};

    return batchEnableRules(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type BatchEnableRulesMutationResult = NonNullable<
  Awaited<ReturnType<typeof batchEnableRules>>
>;
export type BatchEnableRulesMutationBody = BatchRuleIdsRequest;
export type BatchEnableRulesMutationError = void;

export const useBatchEnableRules = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof batchEnableRules>>,
      TError,
      { data: BatchRuleIdsRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof batchEnableRules>>,
  TError,
  { data: BatchRuleIdsRequest },
  TContext
> => {
  const mutationOptions = getBatchEnableRulesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getRule = (id: number, signal?: AbortSignal) => {
  return customInstance<ResponseDataWrapperRequestRule>({
    url: `/request_processing/rules/${id}`,
    method: 'GET',
    signal,
  });
};

export const getGetRuleQueryKey = (id: number) => {
  return [`/request_processing/rules/${id}`] as const;
};

export const getGetRuleQueryOptions = <
  TData = Awaited<ReturnType<typeof getRule>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRule>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetRuleQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getRule>>> = ({
    signal,
  }) => getRule(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getRule>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetRuleQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRule>>
>;
export type GetRuleQueryError = void;

export function useGetRule<
  TData = Awaited<ReturnType<typeof getRule>>,
  TError = void,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRule>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRule>>,
          TError,
          Awaited<ReturnType<typeof getRule>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRule<
  TData = Awaited<ReturnType<typeof getRule>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRule>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRule>>,
          TError,
          Awaited<ReturnType<typeof getRule>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetRule<
  TData = Awaited<ReturnType<typeof getRule>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRule>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetRule<
  TData = Awaited<ReturnType<typeof getRule>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getRule>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetRuleQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateRule = (
  id: number,
  updateRuleRequest: UpdateRuleRequest,
) => {
  return customInstance<ResponseDataWrapperTupleUnit>({
    url: `/request_processing/rules/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: updateRuleRequest,
  });
};

export const getUpdateRuleMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateRule>>,
    TError,
    { id: number; data: UpdateRuleRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateRule>>,
  TError,
  { id: number; data: UpdateRuleRequest },
  TContext
> => {
  const mutationKey = ['updateRule'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateRule>>,
    { id: number; data: UpdateRuleRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateRule(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateRuleMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateRule>>
>;
export type UpdateRuleMutationBody = UpdateRuleRequest;
export type UpdateRuleMutationError = void;

export const useUpdateRule = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateRule>>,
      TError,
      { id: number; data: UpdateRuleRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateRule>>,
  TError,
  { id: number; data: UpdateRuleRequest },
  TContext
> => {
  const mutationOptions = getUpdateRuleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const deleteRule = (id: number) => {
  return customInstance<ResponseDataWrapperTupleUnit>({
    url: `/request_processing/rules/${id}`,
    method: 'DELETE',
  });
};

export const getDeleteRuleMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRule>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRule>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteRule'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRule>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteRule(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteRuleMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRule>>
>;

export type DeleteRuleMutationError = void;

export const useDeleteRule = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteRule>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteRule>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteRuleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const toggleRule = (
  id: number,
  toggleRuleRequest: ToggleRuleRequest,
) => {
  return customInstance<ResponseDataWrapperTupleUnit>({
    url: `/request_processing/rules/${id}/toggle`,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json' },
    data: toggleRuleRequest,
  });
};

export const getToggleRuleMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof toggleRule>>,
    TError,
    { id: number; data: ToggleRuleRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof toggleRule>>,
  TError,
  { id: number; data: ToggleRuleRequest },
  TContext
> => {
  const mutationKey = ['toggleRule'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof toggleRule>>,
    { id: number; data: ToggleRuleRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return toggleRule(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ToggleRuleMutationResult = NonNullable<
  Awaited<ReturnType<typeof toggleRule>>
>;
export type ToggleRuleMutationBody = ToggleRuleRequest;
export type ToggleRuleMutationError = void;

export const useToggleRule = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof toggleRule>>,
      TError,
      { id: number; data: ToggleRuleRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof toggleRule>>,
  TError,
  { id: number; data: ToggleRuleRequest },
  TContext
> => {
  const mutationOptions = getToggleRuleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
export const getTemplateHandlers = (signal?: AbortSignal) => {
  return customInstance<ResponseDataWrapperTemplateHandlersResponse>({
    url: `/request_processing/templates/handlers`,
    method: 'GET',
    signal,
  });
};

export const getGetTemplateHandlersQueryKey = () => {
  return [`/request_processing/templates/handlers`] as const;
};

export const getGetTemplateHandlersQueryOptions = <
  TData = Awaited<ReturnType<typeof getTemplateHandlers>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getTemplateHandlers>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTemplateHandlersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTemplateHandlers>>
  > = ({ signal }) => getTemplateHandlers(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTemplateHandlers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTemplateHandlersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTemplateHandlers>>
>;
export type GetTemplateHandlersQueryError = void;

export function useGetTemplateHandlers<
  TData = Awaited<ReturnType<typeof getTemplateHandlers>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTemplateHandlers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTemplateHandlers>>,
          TError,
          Awaited<ReturnType<typeof getTemplateHandlers>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTemplateHandlers<
  TData = Awaited<ReturnType<typeof getTemplateHandlers>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTemplateHandlers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTemplateHandlers>>,
          TError,
          Awaited<ReturnType<typeof getTemplateHandlers>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTemplateHandlers<
  TData = Awaited<ReturnType<typeof getTemplateHandlers>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTemplateHandlers>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetTemplateHandlers<
  TData = Awaited<ReturnType<typeof getTemplateHandlers>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTemplateHandlers>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTemplateHandlersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
