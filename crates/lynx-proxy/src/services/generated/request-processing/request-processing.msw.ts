/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';

import {
  CaptureType,
  DelayType,
  LogicalOperator,
  ResponseCode,
} from '../utoipaAxum.schemas';
import type {
  ResponseDataWrapperCreateRuleResponse,
  ResponseDataWrapperRequestRule,
  ResponseDataWrapperRuleListResponse,
  ResponseDataWrapperTemplateHandlersResponse,
  ResponseDataWrapperTupleUnit,
  UrlPattern,
} from '../utoipaAxum.schemas';

export const getCreateRuleResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperCreateRuleResponse> = {},
): ResponseDataWrapperCreateRuleResponse => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: { id: faker.number.int({ min: undefined, max: undefined }) },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getListRulesResponseUrlPatternMock = (
  overrideResponse: Partial<UrlPattern> = {},
): UrlPattern => ({
  ...{
    captureType: faker.helpers.arrayElement(Object.values(CaptureType)),
    pattern: faker.string.alpha(20),
  },
  ...overrideResponse,
});

export const getListRulesResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperRuleListResponse> = {},
): ResponseDataWrapperRuleListResponse => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    page: faker.number.int({ min: 0, max: undefined }),
    pageSize: faker.number.int({ min: 0, max: undefined }),
    rules: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      capture: {
        condition: faker.helpers.arrayElement([
          {
            ...{
              headers: faker.helpers.arrayElement([
                faker.helpers.arrayElement([[], null]),
                undefined,
              ]),
              host: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
              method: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
              urlPattern: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  null,
                  { ...getListRulesResponseUrlPatternMock() },
                ]),
                undefined,
              ]),
            },
            ...{ type: faker.helpers.arrayElement(['simple'] as const) },
          },
          {
            ...{
              conditions: [],
              operator: faker.helpers.arrayElement(
                Object.values(LogicalOperator),
              ),
            },
            ...{ type: faker.helpers.arrayElement(['complex'] as const) },
          },
        ]),
        id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
      },
      description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
      enabled: faker.datatype.boolean(),
      handlers: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        description: faker.helpers.arrayElement([
          faker.helpers.arrayElement([faker.string.alpha(20), null]),
          undefined,
        ]),
        enabled: faker.datatype.boolean(),
        executionOrder: faker.number.int({ min: undefined, max: undefined }),
        handlerType: faker.helpers.arrayElement([
          {
            ...{
              reason: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
              statusCode: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  null,
                ]),
                undefined,
              ]),
            },
            ...{ type: faker.helpers.arrayElement(['block'] as const) },
          },
          {
            ...{
              modifyBody: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
              modifyHeaders: faker.helpers.arrayElement([
                faker.helpers.arrayElement([null]),
                undefined,
              ]),
              modifyMethod: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
              modifyUrl: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
            },
            ...{ type: faker.helpers.arrayElement(['modifyRequest'] as const) },
          },
          {
            ...{
              contentType: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
              filePath: faker.string.alpha(20),
              statusCode: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  null,
                ]),
                undefined,
              ]),
            },
            ...{ type: faker.helpers.arrayElement(['localFile'] as const) },
          },
          {
            ...{
              modifyBody: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
              modifyHeaders: faker.helpers.arrayElement([
                faker.helpers.arrayElement([null]),
                undefined,
              ]),
              modifyMethod: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
              modifyStatusCode: faker.helpers.arrayElement([
                faker.helpers.arrayElement([
                  faker.number.int({ min: undefined, max: undefined }),
                  null,
                ]),
                undefined,
              ]),
            },
            ...{
              type: faker.helpers.arrayElement(['modifyResponse'] as const),
            },
          },
          {
            ...{
              targetAuthority: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
              targetPath: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
              targetScheme: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
            },
            ...{ type: faker.helpers.arrayElement(['proxyForward'] as const) },
          },
          {
            ...{
              content: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
              injectionPosition: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.string.alpha(20), null]),
                undefined,
              ]),
            },
            ...{
              type: faker.helpers.arrayElement(['htmlScriptInjector'] as const),
            },
          },
          {
            ...{
              delayMs: faker.number.int({ min: 0, max: undefined }),
              delayType: faker.helpers.arrayElement(Object.values(DelayType)),
              varianceMs: faker.helpers.arrayElement([
                faker.number.int({ min: 0, max: undefined }),
                undefined,
              ]),
            },
            ...{ type: faker.helpers.arrayElement(['delay'] as const) },
          },
        ]),
        id: faker.helpers.arrayElement([
          faker.helpers.arrayElement([
            faker.number.int({ min: undefined, max: undefined }),
            null,
          ]),
          undefined,
        ]),
        name: faker.string.alpha(20),
      })),
      id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      name: faker.string.alpha(20),
      priority: faker.number.int({ min: undefined, max: undefined }),
    })),
    total: faker.number.int({ min: 0, max: undefined }),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getBatchDeleteRulesResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTupleUnit> = {},
): ResponseDataWrapperTupleUnit => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {},
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getBatchDisableRulesResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTupleUnit> = {},
): ResponseDataWrapperTupleUnit => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {},
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getBatchEnableRulesResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTupleUnit> = {},
): ResponseDataWrapperTupleUnit => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {},
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetRuleResponseUrlPatternMock = (
  overrideResponse: Partial<UrlPattern> = {},
): UrlPattern => ({
  ...{
    captureType: faker.helpers.arrayElement(Object.values(CaptureType)),
    pattern: faker.string.alpha(20),
  },
  ...overrideResponse,
});

export const getGetRuleResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperRequestRule> = {},
): ResponseDataWrapperRequestRule => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    capture: {
      condition: faker.helpers.arrayElement([
        {
          ...{
            headers: faker.helpers.arrayElement([
              faker.helpers.arrayElement([[], null]),
              undefined,
            ]),
            host: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            method: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            urlPattern: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                null,
                { ...getGetRuleResponseUrlPatternMock() },
              ]),
              undefined,
            ]),
          },
          ...{ type: faker.helpers.arrayElement(['simple'] as const) },
        },
        {
          ...{
            conditions: [],
            operator: faker.helpers.arrayElement(
              Object.values(LogicalOperator),
            ),
          },
          ...{ type: faker.helpers.arrayElement(['complex'] as const) },
        },
      ]),
      id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
    },
    description: faker.helpers.arrayElement([
      faker.helpers.arrayElement([faker.string.alpha(20), null]),
      undefined,
    ]),
    enabled: faker.datatype.boolean(),
    handlers: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
      enabled: faker.datatype.boolean(),
      executionOrder: faker.number.int({ min: undefined, max: undefined }),
      handlerType: faker.helpers.arrayElement([
        {
          ...{
            reason: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            statusCode: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
          },
          ...{ type: faker.helpers.arrayElement(['block'] as const) },
        },
        {
          ...{
            modifyBody: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            modifyHeaders: faker.helpers.arrayElement([
              faker.helpers.arrayElement([null]),
              undefined,
            ]),
            modifyMethod: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            modifyUrl: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
          },
          ...{ type: faker.helpers.arrayElement(['modifyRequest'] as const) },
        },
        {
          ...{
            contentType: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            filePath: faker.string.alpha(20),
            statusCode: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
          },
          ...{ type: faker.helpers.arrayElement(['localFile'] as const) },
        },
        {
          ...{
            modifyBody: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            modifyHeaders: faker.helpers.arrayElement([
              faker.helpers.arrayElement([null]),
              undefined,
            ]),
            modifyMethod: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            modifyStatusCode: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
          },
          ...{ type: faker.helpers.arrayElement(['modifyResponse'] as const) },
        },
        {
          ...{
            targetAuthority: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            targetPath: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            targetScheme: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
          },
          ...{ type: faker.helpers.arrayElement(['proxyForward'] as const) },
        },
        {
          ...{
            content: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            injectionPosition: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
          },
          ...{
            type: faker.helpers.arrayElement(['htmlScriptInjector'] as const),
          },
        },
        {
          ...{
            delayMs: faker.number.int({ min: 0, max: undefined }),
            delayType: faker.helpers.arrayElement(Object.values(DelayType)),
            varianceMs: faker.helpers.arrayElement([
              faker.number.int({ min: 0, max: undefined }),
              undefined,
            ]),
          },
          ...{ type: faker.helpers.arrayElement(['delay'] as const) },
        },
      ]),
      id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      name: faker.string.alpha(20),
    })),
    id: faker.helpers.arrayElement([
      faker.helpers.arrayElement([
        faker.number.int({ min: undefined, max: undefined }),
        null,
      ]),
      undefined,
    ]),
    name: faker.string.alpha(20),
    priority: faker.number.int({ min: undefined, max: undefined }),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateRuleResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTupleUnit> = {},
): ResponseDataWrapperTupleUnit => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {},
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getDeleteRuleResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTupleUnit> = {},
): ResponseDataWrapperTupleUnit => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {},
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getToggleRuleResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTupleUnit> = {},
): ResponseDataWrapperTupleUnit => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {},
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetTemplateHandlersResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTemplateHandlersResponse> = {},
): ResponseDataWrapperTemplateHandlersResponse => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    handlers: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      description: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
      enabled: faker.datatype.boolean(),
      executionOrder: faker.number.int({ min: undefined, max: undefined }),
      handlerType: faker.helpers.arrayElement([
        {
          ...{
            reason: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            statusCode: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
          },
          ...{ type: faker.helpers.arrayElement(['block'] as const) },
        },
        {
          ...{
            modifyBody: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            modifyHeaders: faker.helpers.arrayElement([
              faker.helpers.arrayElement([null]),
              undefined,
            ]),
            modifyMethod: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            modifyUrl: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
          },
          ...{ type: faker.helpers.arrayElement(['modifyRequest'] as const) },
        },
        {
          ...{
            contentType: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            filePath: faker.string.alpha(20),
            statusCode: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
          },
          ...{ type: faker.helpers.arrayElement(['localFile'] as const) },
        },
        {
          ...{
            modifyBody: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            modifyHeaders: faker.helpers.arrayElement([
              faker.helpers.arrayElement([null]),
              undefined,
            ]),
            modifyMethod: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            modifyStatusCode: faker.helpers.arrayElement([
              faker.helpers.arrayElement([
                faker.number.int({ min: undefined, max: undefined }),
                null,
              ]),
              undefined,
            ]),
          },
          ...{ type: faker.helpers.arrayElement(['modifyResponse'] as const) },
        },
        {
          ...{
            targetAuthority: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            targetPath: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            targetScheme: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
          },
          ...{ type: faker.helpers.arrayElement(['proxyForward'] as const) },
        },
        {
          ...{
            content: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
            injectionPosition: faker.helpers.arrayElement([
              faker.helpers.arrayElement([faker.string.alpha(20), null]),
              undefined,
            ]),
          },
          ...{
            type: faker.helpers.arrayElement(['htmlScriptInjector'] as const),
          },
        },
        {
          ...{
            delayMs: faker.number.int({ min: 0, max: undefined }),
            delayType: faker.helpers.arrayElement(Object.values(DelayType)),
            varianceMs: faker.helpers.arrayElement([
              faker.number.int({ min: 0, max: undefined }),
              undefined,
            ]),
          },
          ...{ type: faker.helpers.arrayElement(['delay'] as const) },
        },
      ]),
      id: faker.helpers.arrayElement([
        faker.helpers.arrayElement([
          faker.number.int({ min: undefined, max: undefined }),
          null,
        ]),
        undefined,
      ]),
      name: faker.string.alpha(20),
    })),
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreateRuleMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperCreateRuleResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperCreateRuleResponse>
        | ResponseDataWrapperCreateRuleResponse),
) => {
  return http.post('*/request_processing/rule', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateRuleResponseMock(),
      ),
      { status: 201, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getListRulesMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperRuleListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperRuleListResponse>
        | ResponseDataWrapperRuleListResponse),
) => {
  return http.get('*/request_processing/rules', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getListRulesResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getBatchDeleteRulesMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTupleUnit
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTupleUnit>
        | ResponseDataWrapperTupleUnit),
) => {
  return http.post('*/request_processing/rules/batch-delete', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getBatchDeleteRulesResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getBatchDisableRulesMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTupleUnit
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTupleUnit>
        | ResponseDataWrapperTupleUnit),
) => {
  return http.post('*/request_processing/rules/batch-disable', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getBatchDisableRulesResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getBatchEnableRulesMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTupleUnit
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTupleUnit>
        | ResponseDataWrapperTupleUnit),
) => {
  return http.post('*/request_processing/rules/batch-enable', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getBatchEnableRulesResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetRuleMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperRequestRule
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperRequestRule>
        | ResponseDataWrapperRequestRule),
) => {
  return http.get('*/request_processing/rules/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetRuleResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getUpdateRuleMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTupleUnit
    | ((
        info: Parameters<Parameters<typeof http.put>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTupleUnit>
        | ResponseDataWrapperTupleUnit),
) => {
  return http.put('*/request_processing/rules/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateRuleResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getDeleteRuleMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTupleUnit
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTupleUnit>
        | ResponseDataWrapperTupleUnit),
) => {
  return http.delete('*/request_processing/rules/:id', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getDeleteRuleResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getToggleRuleMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTupleUnit
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTupleUnit>
        | ResponseDataWrapperTupleUnit),
) => {
  return http.patch('*/request_processing/rules/:id/toggle', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getToggleRuleResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getGetTemplateHandlersMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTemplateHandlersResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTemplateHandlersResponse>
        | ResponseDataWrapperTemplateHandlersResponse),
) => {
  return http.get('*/request_processing/templates/handlers', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTemplateHandlersResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};
export const getRequestProcessingMock = () => [
  getCreateRuleMockHandler(),
  getListRulesMockHandler(),
  getBatchDeleteRulesMockHandler(),
  getBatchDisableRulesMockHandler(),
  getBatchEnableRulesMockHandler(),
  getGetRuleMockHandler(),
  getUpdateRuleMockHandler(),
  getDeleteRuleMockHandler(),
  getToggleRuleMockHandler(),
  getGetTemplateHandlersMockHandler(),
];
