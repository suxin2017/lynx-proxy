/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  ClientProxyConfig,
  ErrorResponse,
  ResponseDataWrapperClientProxyConfig,
  ResponseDataWrapperTupleUnit,
} from '../utoipaAxum.schemas';

import { customInstance } from '../../customInstance';

export const getClientProxyConfig = (signal?: AbortSignal) => {
  return customInstance<ResponseDataWrapperClientProxyConfig>({
    url: `/client_proxy/client-proxy/config`,
    method: 'GET',
    signal,
  });
};

export const getGetClientProxyConfigQueryKey = () => {
  return [`/client_proxy/client-proxy/config`] as const;
};

export const getGetClientProxyConfigQueryOptions = <
  TData = Awaited<ReturnType<typeof getClientProxyConfig>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getClientProxyConfig>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetClientProxyConfigQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getClientProxyConfig>>
  > = ({ signal }) => getClientProxyConfig(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getClientProxyConfig>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetClientProxyConfigQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClientProxyConfig>>
>;
export type GetClientProxyConfigQueryError = ErrorResponse;

export function useGetClientProxyConfig<
  TData = Awaited<ReturnType<typeof getClientProxyConfig>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientProxyConfig>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClientProxyConfig>>,
          TError,
          Awaited<ReturnType<typeof getClientProxyConfig>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetClientProxyConfig<
  TData = Awaited<ReturnType<typeof getClientProxyConfig>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientProxyConfig>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getClientProxyConfig>>,
          TError,
          Awaited<ReturnType<typeof getClientProxyConfig>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetClientProxyConfig<
  TData = Awaited<ReturnType<typeof getClientProxyConfig>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientProxyConfig>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetClientProxyConfig<
  TData = Awaited<ReturnType<typeof getClientProxyConfig>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getClientProxyConfig>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetClientProxyConfigQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateClientProxyConfig = (
  clientProxyConfig: ClientProxyConfig,
  signal?: AbortSignal,
) => {
  return customInstance<ResponseDataWrapperTupleUnit>({
    url: `/client_proxy/client-proxy/config`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: clientProxyConfig,
    signal,
  });
};

export const getUpdateClientProxyConfigMutationOptions = <
  TError = ErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateClientProxyConfig>>,
    TError,
    { data: ClientProxyConfig },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateClientProxyConfig>>,
  TError,
  { data: ClientProxyConfig },
  TContext
> => {
  const mutationKey = ['updateClientProxyConfig'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateClientProxyConfig>>,
    { data: ClientProxyConfig }
  > = (props) => {
    const { data } = props ?? {};

    return updateClientProxyConfig(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateClientProxyConfigMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateClientProxyConfig>>
>;
export type UpdateClientProxyConfigMutationBody = ClientProxyConfig;
export type UpdateClientProxyConfigMutationError = ErrorResponse;

export const useUpdateClientProxyConfig = <
  TError = ErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateClientProxyConfig>>,
      TError,
      { data: ClientProxyConfig },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateClientProxyConfig>>,
  TError,
  { data: ClientProxyConfig },
  TContext
> => {
  const mutationOptions = getUpdateClientProxyConfigMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
