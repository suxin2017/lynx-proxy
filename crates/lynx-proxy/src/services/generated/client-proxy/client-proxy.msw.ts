/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * utoipa-axum
 * Utoipa's axum bindings for seamless integration for the two
 * OpenAPI spec version: 0.2.0
 */
import { faker } from '@faker-js/faker';

import { HttpResponse, delay, http } from 'msw';

import { ResponseCode } from '../utoipaAxum.schemas';
import type {
  ResponseDataWrapperClientProxyConfig,
  ResponseDataWrapperTupleUnit,
} from '../utoipaAxum.schemas';

export const getGetClientProxyConfigResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperClientProxyConfig> = {},
): ResponseDataWrapperClientProxyConfig => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {
    apiDebug: {
      type: faker.string.alpha(20),
      url: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
    },
    proxyRequests: {
      type: faker.string.alpha(20),
      url: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.string.alpha(20), null]),
        undefined,
      ]),
    },
  },
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getUpdateClientProxyConfigResponseMock = (
  overrideResponse: Partial<ResponseDataWrapperTupleUnit> = {},
): ResponseDataWrapperTupleUnit => ({
  code: faker.helpers.arrayElement(Object.values(ResponseCode)),
  data: {},
  message: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.string.alpha(20), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetClientProxyConfigMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperClientProxyConfig
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperClientProxyConfig>
        | ResponseDataWrapperClientProxyConfig),
) => {
  return http.get('*/client_proxy/client-proxy/config', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetClientProxyConfigResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};

export const getUpdateClientProxyConfigMockHandler = (
  overrideResponse?:
    | ResponseDataWrapperTupleUnit
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) =>
        | Promise<ResponseDataWrapperTupleUnit>
        | ResponseDataWrapperTupleUnit),
) => {
  return http.post('*/client_proxy/client-proxy/config', async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateClientProxyConfigResponseMock(),
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } },
    );
  });
};
export const getClientProxyMock = () => [
  getGetClientProxyConfigMockHandler(),
  getUpdateClientProxyConfigMockHandler(),
];
