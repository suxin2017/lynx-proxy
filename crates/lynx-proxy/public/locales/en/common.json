{
  "common": {
    "copySuccess": "Copied successfully",
    "copyFailed": "Copy failed"
  },
  "networkSetting": {
    "title": "Network Settings",
    "subTitle": "Configure network settings for the application",
    "switch": "Switch",
    "host": "Host Address",
    "port": "Port",
    "operation": "Action",
    "add": "Add",
    "save": "Save Settings",
    "reset": "Reset",
    "captureHttps": {
      "title": "Capture HTTPS Requests",
      "description": "Capturing HTTPS requests requires a certificate. Please ensure it's installed",
      "status": "Current Status",
      "filter": {
        "title": "Capture Filter",
        "description": "Capture filters are used to set rules for capturing requests. You can use Glob patterns to match request URLs",
        "includeDomains": "Include Domains",
        "excludeDomains": "Exclude Domains",
        "invalidHost": "Invalid host",
        "invalidPort": "Invalid port",
        "validation": {
          "domain": "Please enter domain",
          "port": "Please enter port number"
        }
      }
    },
    "messages": {
      "saveSuccess": "Saved successfully",
      "saveError": "Save failed, please try again"
    },
    "clientProxy": {
      "title": "Client Proxy Configuration",
      "description": "Configure client proxy settings for proxy requests and API debugging",
      "proxyRequests": {
        "title": "Proxy Requests Client Proxy",
        "description": "Set the client proxy used for proxy requests"
      },
      "apiDebug": {
        "title": "API Debug Client Proxy",
        "description": "Set the client proxy used for API debugging"
      },
      "proxyType": {
        "label": "Proxy Type",
        "none": "No Proxy",
        "system": "Use System Proxy",
        "custom": "Custom Proxy"
      },
      "proxyUrl": {
        "label": "Proxy URL",
        "placeholder": "http://proxy.example.com:8080",
        "validation": {
          "required": "Please enter proxy URL",
          "format": "Invalid proxy URL format, only http or https protocols are supported"
        }
      }
    }
  },
  "settings": {
    "title": "Settings",
    "menu": {
      "general": "General Settings",
      "certificates": "Certificates",
      "network": "Network",
      "clientProxy": "Client Proxy"
    },
    "certificate": {
      "title": "Certificate Management",
      "subtitle": "Manage SSL certificates required for HTTPS capturing",
      "installed": {
        "title": "Certificate Installed Successfully",
        "description": "Your system trusts this certificate and can now capture HTTPS requests."
      },
      "notInstalled": {
        "title": "Certificate Installation Required",
        "description": "To capture HTTPS requests, you need to install and trust this certificate in your system or browser."
      },
      "certPath": "Certificate Path",
      "copySuccess": "Certificate path copied",
      "checkStatus": "Check Status",
      "installCert": "Install Certificate",
      "downloadCert": "Download Certificate",
      "install": {
        "title": "Certificate Installation Steps",
        "platform": {
          "windows": "Windows",
          "macos": "MacOS",
          "linux": "Linux",
          "mobile": "Mobile Devices"
        },
        "linux": {
          "step1": {
            "title": "Download Certificate",
            "description": "Download the certificate file from this page"
          },
          "step2": {
            "title": "Install for Chrome/Chromium",
            "description": "Navigate to chrome://certificate-manager/localcerts/usercerts, click \"Import\", and select the downloaded certificate file"
          },
          "step3": {
            "title": "Install for Firefox",
            "description": "Navigate to about:preferences#privacy, click \"View Certificates\", select \"Import\" in the \"Certificate Manager\", and select the downloaded certificate file"
          },
          "step4": {
            "title": "Install for Ubuntu System",
            "description": "sudo cp /path/to/lynx-proxy.crt /usr/local/share/ca-certificates/lynx-proxy.crt && sudo update-ca-certificates"
          }
        },
        "windows": {
          "step1": {
            "title": "Open Certificate",
            "description": "Double-click the downloaded certificate file (.crt)"
          },
          "step2": {
            "title": "Select Certificate Store",
            "description": "Click \"Install Certificate\" → Select \"Local Machine\" → Click \"Next\""
          },
          "step3": {
            "title": "Import Root Certificate",
            "description": "Select \"Place all certificates in the following store\" → Click \"Browse\" → Select \"Trusted Root Certification Authorities\" → Click \"Next\""
          },
          "step4": {
            "title": "Complete Installation",
            "description": "Click \"Finish\", then click \"Yes\" in the security warning dialog"
          }
        },
        "macos": {
          "step1": {
            "title": "Open Keychain Access",
            "description": "Search for and open \"Keychain Access\" in Launchpad"
          },
          "step2": {
            "title": "Import Certificate",
            "description": "Select \"File\" → \"Import Items\", choose the downloaded certificate"
          },
          "step3": {
            "title": "Trust Certificate",
            "description": "Double-click the imported certificate → Expand \"Trust\" → Set \"When using this certificate\" to \"Always Trust\""
          },
          "step4": {
            "title": "Confirm Changes",
            "description": "Enter your administrator password to confirm changes"
          }
        },
        "mobile": {
          "step1": {
            "title": "Download Certificate",
            "description": "Open the certificate download link on your mobile device"
          },
          "step2": {
            "title": "iOS Devices",
            "description": "Go to \"Settings\" → \"General\" → \"Profile\" → Select downloaded certificate → Tap \"Install\", then enable it in \"Settings\" → \"General\" → \"About\" → \"Certificate Trust Settings\""
          },
          "step3": {
            "title": "Android Devices",
            "description": "Go to \"Settings\" → \"Security\" → \"More Security Settings\" → \"Encryption & Credentials\" → \"Install Certificate\" → \"CA Certificate\", select the downloaded certificate file"
          }
        }
      }
    },
    "general": {
      "title": "General Settings",
      "subTitle": "Configure basic behavior and appearance of the application",
      "language": "Language Selection",
      "maxLogSize": {
        "title": "Maximum Log Size",
        "description": "Set the maximum number of logs. When exceeded, the oldest logs will be removed",
        "validation": {
          "required": "Please enter the maximum log size",
          "range": "Maximum log size must be between 60 and 6000"
        }
      },
      "actions": {
        "save": "Save Settings",
        "reset": "Reset"
      }
    }
  },
  "network": {
    "filterUriPlaceholder": "Search Request...",
    "contextMenu": {
      "copyCurl": "Copy as cURL"
    },
    "title": "Network",
    "sequence": "Sequence",
    "structure": "Structure",
    "overview": "Overview",
    "contents": "Contents",
    "websocket": "Websocket",
    "toolbar": {
      "autoScrollLabel": "Auto Scroll",
      "autoScroll": "Auto Scroll to Bottom"
    },
    "table": {
      "status": "Status",
      "schema": "Schema",
      "version": "Version",
      "method": "Method",
      "path": "Path",
      "type": "Type",
      "time": "Time",
      "startTime": "Start Time"
    }
  },
  "sideBar": {
    "network": "Network",
    "certificates": "Certificates",
    "rules": "Rules",
    "apiDebug": "API Debug",
    "settings": "Settings"
  },
  "recording": {
    "start": "Start Recording",
    "stop": "Stop Recording"
  },
  "clearRequests": "Clear",
  "contextMenu": {
    "downloadAllRequests": "Download All Requests",
    "copySelectedRequest": "Copy Selected Request",
    "addToApiDebug": "Add to API Debug",
    "addToApiDebugSuccess": "Successfully added to API Debug",
    "addToApiDebugFailed": "Failed to add to API Debug",
    "noRequestData": "No request data available",
    "addToRule": "Add to Rule",
    "blockRequest": "Block Request",
    "blockDomain": "Block Domain",
    "blockUrl": "Block URL",
    "overrideResponse": "Override Response",
    "overrideHeaders": "Override Headers",
    "overrideBody": "Override Body",
    "overrideFullResponse": "Override Response",
    "ruleCreateSuccess": "Rule created successfully",
    "ruleCreateFailed": "Failed to create rule",
    "noSelectedRecord": "No selected request record or request data",
    "noResponseData": "No selected request record or response data",
    "blockReason": "Access blocked",
    "blockDomainName": "Block Domain - {{hostname}}",
    "blockUrlName": "Block URL - {{url}}",
    "overrideHeadersName": "Override Headers - {{url}}",
    "overrideBodyName": "Override Body - {{url}}",
    "overrideResponseName": "Override Response - {{url}}",
    "handlerNames": {
      "blockRequest": "Block Request",
      "modifyResponse": "Modify Response"
    }
  },
  "ruleManager": {
    "title": "Interception Rules List",
    "description": "Manage rules for intercepting and modifying network requests",
    "createRule": "Create Rule",
    "table": {
      "status": "Status",
      "ruleName": "Rule Name",
      "matchConditions": "Match Conditions",
      "action": "Action",
      "priority": "Priority",
      "operations": "Operations"
    },
    "actions": {
      "edit": "Edit",
      "copy": "Copy",
      "delete": "Delete"
    },
    "deleteConfirm": {
      "title": "Confirm Delete",
      "content": "Are you sure you want to delete rule \"{{name}}\"? This action cannot be undone.",
      "okText": "Delete",
      "cancelText": "Cancel"
    },
    "copyConfirm": {
      "title": "Confirm Copy",
      "content": "Are you sure you want to copy rule \"{{name}}\"?",
      "okText": "Copy",
      "cancelText": "Cancel"
    },
    "copyRuleName": "{{name}} (Copy)",
    "copyRuleError": "Failed to copy rule:",
    "noActions": "No Actions",
    "allActionsDisabled": "All actions disabled",
    "handlerTypes": {
      "block": "Block",
      "modifyRequest": "Modify Request",
      "modifyResponse": "Modify Response",
      "localFile": "Local File",
      "proxyForward": "Proxy Forward",
      "unknown": "Unknown Action"
    },
    "quickAdd": {
      "prefix": "Quick Add: ",
      "blockRequest": {
        "name": "Block Request",
        "description": "Block request with status code 403"
      },
      "modifyRequest": {
        "name": "Modify Request",
        "description": "Modify request headers, body, method or URL"
      },
      "modifyResponse": {
        "name": "Modify Response",
        "description": "Modify response headers, body or status code"
      },
      "localFile": {
        "name": "Local File",
        "description": "Return local file as response"
      },
      "proxyForward": {
        "name": "Proxy Forward",
        "description": "Forward request to another server"
      },
      "htmlScriptInjector": {
        "name": "HTML Content Injector",
        "description": "Inject custom content into HTML responses",
        "config": {
          "title": "HTML Content Injector Configuration",
          "description": "This handler injects custom content into HTML responses. You can inject JavaScript scripts, CSS styles, or other HTML elements. Only works with HTML content types.",
          "content": {
            "label": "Injection Content",
            "placeholder": "<script>console.log('Hello from injected script!');</script>",
            "extra": "Content to be injected into HTML, can be scripts, styles, or other HTML elements",
            "required": "Please enter the content to inject"
          },
          "injectionPosition": {
            "label": "Injection Position",
            "placeholder": "Select content injection position",
            "options": {
              "head": "Head (before </head>)",
              "bodyStart": "Body Start (after <body>)",
              "bodyEnd": "Body End (before </body>)"
            }
          },
          "tips": {
            "tip1": "Supports injecting any HTML content including scripts, styles, meta tags, etc.",
            "tip2": "Content injection occurs at the final stage of response processing to ensure HTML structure integrity",
            "tip3": "Recommend injecting scripts at body end position to ensure DOM elements are loaded"
          }
        }
      }
    },
    "handlerDescriptions": {
      "statusCode": "Status Code: {{code}}",
      "reason": "Access blocked",
      "modifyHeaders": "Modify request headers",
      "modifyBody": "Modify request body",
      "modifyMethod": "Method: {{method}}",
      "modifyUrl": "Modify URL",
      "modifyRequest": "Modify request",
      "modifyResponseHeaders": "Modify response headers",
      "modifyResponseBody": "Modify response body",
      "modifyResponse": "Modify response",
      "file": "File: {{path}}",
      "returnLocalFile": "Return local file",
      "forwardTo": "Forward to: {{host}}",
      "proxyForward": "Proxy forward",
      "htmlScriptInjector": "HTML Content Injector",
      "injectScript": "Inject content to: {{position}}"
    },
    "captureTypes": {
      "glob": "Glob",
      "regex": "Regex",
      "exact": "Exact",
      "contains": "Contains"
    },
    "operators": {
      "and": "AND",
      "or": "OR",
      "not": "NOT"
    },
    "conditionLabels": {
      "method": "Method: ",
      "host": "Host: ",
      "not": "(NOT)"
    },
    "createRuleDrawer": {
      "createTitle": "Create Interception Rule",
      "editTitle": "Edit Interception Rule",
      "cancel": "Cancel",
      "save": "Save Changes",
      "create": "Create Rule",
      "createSuccess": "Rule created successfully",
      "updateSuccess": "Rule updated successfully",
      "operationFailed": "Operation failed, please try again",
      "basicInfo": {
        "title": "Basic Information",
        "description": "Configure basic rule attributes including name, description and execution priority",
        "ruleName": "Rule Name",
        "ruleNamePlaceholder": "Please enter rule name",
        "ruleDescription": "Rule Description",
        "ruleDescriptionPlaceholder": "Please enter rule description (optional)",
        "enableRule": "Enable Rule",
        "enableDescription": "Whether the rule takes effect immediately",
        "enableStatus": "Enable Status",
        "enableTooltip": "The rule will not be executed when disabled",
        "priority": "Priority",
        "priorityTooltip": "Higher values have higher priority, range: 0-100"
      },
      "captureRule": {
        "title": "Capture Rule",
        "description": "Define what kind of requests will be matched and processed by this rule",
        "simpleRule": "Simple Rule",
        "complexRule": "Complex Rule",
        "addAtLeastOneCondition": "Please add at least one condition",
        "urlPattern": "URL Pattern",
        "selectMatchType": "Select match type",
        "urlPatternPlaceholder": "Enter URL pattern",
        "globHelp": "Use glob syntax to match URLs, e.g.: *.example.com/api/*",
        "regexHelp": "Use regular expression to match URLs, e.g.: ^https://example\\.com/api/.*$",
        "exactHelp": "Match URL exactly",
        "containsHelp": "Match URLs containing this string",
        "httpMethod": "HTTP Method",
        "selectHttpMethod": "Select HTTP method",
        "httpMethodEmptyHelp": "Leave empty to match all HTTP methods",
        "hostname": "Hostname",
        "hostnamePlaceholder": "Enter hostname, e.g.: example.com",
        "hostnameEmptyHelp": "Match all hostnames",
        "headers": "Headers",
        "headerName": "Header name",
        "headerValue": "Header value",
        "noHeadersHelp": "Add header matching conditions",
        "addHeader": "Add Header",
        "condition": "Condition",
        "addOptionalConditions": "Add optional matching conditions",
        "addSimpleCondition": "Add simple condition",
        "addComplexCondition": "Add complex condition",
        "notSet": "Not set",
        "logicalOperator": "Logical Operator",
        "andOperatorDescription": "All conditions must be satisfied",
        "orOperatorDescription": "Any condition must be satisfied",
        "notOperatorDescription": "Match when condition is not satisfied (only one condition allowed)",
        "notOperatorTip": "When using the NOT operator, only one condition can be added. The NOT operator matches requests that do not satisfy the condition.",
        "noConditions": "No conditions yet",
        "clickButtonToStart": "Click the button below to add conditions",
        "rulePreview": "Rule Preview"
      },
      "handlerBehavior": {
        "title": "Handler Behavior",
        "description": "Define the processing actions to execute when requests match the rule. Multiple handlers can be added",
        "noHandlers": "No handlers yet, click the button below to add handlers",
        "modifyConfig": {
          "common": {
            "statusCode": "Status Code",
            "enterName": "Please enter {{type}} name",
            "enterValue": "Please enter {{type}} value",
            "headerNamePlaceholder": "{{type}} name (e.g., {{example}})",
            "headerValuePlaceholder": "{{type}} value",
            "addHeader": "Add {{type}}",
            "newBody": "New {{type}} content",
            "bodyPlaceholder": "Enter new {{type}} content ({{formats}})",
            "optionalDescription": "Leave fields empty for any {{type}} items you don't want to modify"
          },
          "request": {
            "title": "Request Configuration",
            "header": "Request Header",
            "headers": "Request Headers",
            "headersDesc": "Modify request header information",
            "body": "Request Body",
            "bodyDesc": "Modify request body content",
            "method": "Request Method",
            "methodDesc": "Modify HTTP request method",
            "newMethod": "New Request Method",
            "selectMethod": "Select request method",
            "url": "Request URL",
            "urlDesc": "Modify request URL",
            "newUrl": "New URL",
            "urlValidation": "Please enter a valid URL",
            "type": "request"
          },
          "response": {
            "title": "Response Configuration",
            "header": "Response Header",
            "headers": "Response Headers",
            "headersDesc": "Modify response header information",
            "body": "Response Body",
            "bodyDesc": "Modify response body content",
            "statusCode": "Status Code",
            "statusCodeDesc": "Modify response status code",
            "statusCodeValidation": "Status code must be between 100 and 599",
            "selectStatusCode": "Select status code",
            "type": "response"
          }
        },
        "handlerItem": {
          "name": "Name",
          "description": "Description",
          "configuration": "Configuration",
          "unnamed": "Unnamed Handler",
          "notSet": "Not set"
        },
        "blockHandler": {
          "title": "Block Request Configuration",
          "statusCode": "Status Code",
          "statusCodeRequired": "Please enter a status code",
          "statusCodeRange": "Status code must be between 100 and 599",
          "reason": "Block Reason",
          "description": "The blocked request will return the specified HTTP status code and reason. Common status codes: 403 (Forbidden), 404 (Not Found), 503 (Service Unavailable)"
        },
        "proxyForward": {
          "title": "Proxy Forward Configuration",
          "scheme": "Protocol",
          "authority": "Target Address",
          "authorityRequired": "Please enter the target address",
          "path": "Path",
          "description": "Configure the destination address for proxy forwarding. You can specify the protocol, host/port and path of the target URL. For example, to forward requests to an internal network or other servers."
        }
      }
    }
  },
  "startTime": "Start Time",
  "apiDebug": {
    "title": "API Debug",
    "newRequest": "New Request",
    "request": "Request",
    "response": "Response",
    "history": "History",
    "params": "Params",
    "headers": "Headers",
    "body": "Body",
    "cookies": "Cookies",
    "save": "Save",
    "send": "Send",
    "cancel": "Cancel",
    "copy": "Copy",
    "format": "Format",
    "noResponse": "No response yet",
    "sending": "Sending...",
    "requestName": "Request Name",
    "method": "Method",
    "url": "URL",
    "contentType": "Content Type",
    "timeout": "Timeout",
    "responseTime": "Response Time",
    "status": "Status",
    "size": "Size",
    "noHeaders": "No headers",
    "noBody": "No body",
    "requestHistory": "Request History",
    "clearAllHistory": "Clear All History",
    "clearAllHistoryConfirm": "Confirm Clear All History",
    "clearAllHistoryWarning": "This operation will delete all request history records and cannot be recovered. Are you sure you want to continue?",
    "confirmClear": "Confirm Clear",
    "clearSuccess": "All history cleared successfully",
    "clearFailed": "Failed to clear history, please try again",
    "requestCompleted": "Request completed successfully",
    "requestFailed": "Request failed",
    "enterUrl": "Please enter a URL",
    "loadHistory": "Load from history",
    "deleteHistory": "Delete",
    "refresh": "Refresh",
    "noHistory": "No request history",
    "loadHistoryFailed": "Failed to load history",
    "retry": "Retry",
    "loadMore": "Load More",
    "justNow": "Just now",
    "minutesAgo": "{{count}} minutes ago",
    "hoursAgo": "{{count}} hours ago",
    "daysAgo": "{{count}} days ago",
    "unknownTime": "Unknown time",
    "success": "Success",
    "failed": "Failed",
    "pending": "Pending",
    "timeout": "Timeout",
    "importCurl": "Import cURL"
  }
}
